<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法复杂度优化(内存溢出后续)</title>
    <link href="/2025/07/21/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BC%98%E5%8C%96(%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%90%8E%E7%BB%AD)/"/>
    <url>/2025/07/21/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BC%98%E5%8C%96(%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%90%8E%E7%BB%AD)/</url>
    
    <content type="html"><![CDATA[<h2 id="📊-算法复杂度优化-内存溢出后续">📊 算法复杂度优化(内存溢出后续)</h2><p><strong>🚨 – – 问题描述 – –</strong><br>在做<code>设计稿转布局代码</code>时，采用的任意个数元素形成若干个<code>组合</code>的方式来识别布局。在做 k=33 时，也就是 3,262,623(约 326 万)个组合的时候，导致内存溢出了。因为占用内存接近 1G。<code>(8 * 33 + 32) * 3262623 = 992,637,392B = 969,372 KB = 946.7 MB = 0.92 GB</code>。虽然可以生成一个组合就执行判断布局，但是要遍历$2^n$个组合，是指数级的复杂度，当 n=39 时， 有 5497 亿种组合，一台 mac pro(8 核 16G)跑 326 万次要 10 分钟以上。所以只能修改算法，目前组合的方式，生成组合的算法是指数级，是无法再日常生产中跑的。</p><p><strong>🔍 – – 错误中进步 – –</strong></p><ol><li><p><strong>💭 思考：</strong> 一开始的思路是在想，不是每个组合都可能形成布局的，也就是有一些组合很明显一定不行形成组合，那么缩小组合的个数，就能降低算法复杂度，不用枚举所有的组合。</p></li><li><p><strong>🎯 发现特征：</strong> 只有相邻的元素才有可能形成组合。把相邻的元素使用链表连起来，其实这种形式在数据结构上叫<code>工程邻接矩阵</code>,可以把相邻关系表达为<code>邻接矩阵</code>，去遍历每个邻接<code>路径</code>就行。记录在四个方向上邻接的节点，然后把关系表达为邻接矩阵。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 🔗 链的节点类型</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ChainNode</span> &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-title class_">RelationalLayoutEntity</span> | <span class="hljs-title class_">LayoutBlock</span>;<br>  <span class="hljs-attr">block</span>: <span class="hljs-title class_">Block</span>;<br>  <span class="hljs-attr">index</span>?: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">top</span>: <span class="hljs-title class_">ChainNode</span>[]; <span class="hljs-comment">// 上方的邻接node</span><br>  <span class="hljs-attr">bottom</span>: <span class="hljs-title class_">ChainNode</span>[]; <span class="hljs-comment">// 下方的邻接node</span><br>  <span class="hljs-attr">left</span>: <span class="hljs-title class_">ChainNode</span>[]; <span class="hljs-comment">// 左边的邻接node</span><br>  <span class="hljs-attr">right</span>: <span class="hljs-title class_">ChainNode</span>[]; <span class="hljs-comment">// 右边的邻接node</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>🌐 探索邻接矩阵：</strong><br>邻接矩阵，本身是一种图关系，分为好几种：有向图(单向就是一条路径)、无向图(A 和 B 相连，只是一条路径)、连通图(任意两个节点之间都存在路径) 、 非连通图(存在无法到达的节点，图被分为多个连通分量)、完全图(任意两个不同节点都有边连接)、树 (连通的无环无向图，n 个节点有 n-1 条边)、有向无环图(从 A 发出，怎么走都走不到 A)、有向有环图(从 A 绕一圈，还能走到 A).虽然有这么多种，但是遍历方法就一种，只要使用邻接矩阵，那么就一种遍历方法，如下(enumerateAllSimplePaths):<br>📊 邻接矩阵：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 🔢 邻接矩阵数据结构</span><br><span class="hljs-keyword">const</span> adjMatrix = [<br>  <span class="hljs-comment">// 1  2  3  4  5</span><br>  [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-comment">// 1</span><br>  [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-comment">// 2</span><br>  [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-comment">// 3</span><br>  [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-comment">// 4</span><br>  [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-comment">// 5</span><br>];<br></code></pre></td></tr></table></figure><p>🔄 遍历邻接矩阵：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xquery">  <span class="hljs-keyword">function</span> enumerateAllSimplePaths(adjMatrix:<span class="hljs-built_in"> number</span>[][]):<span class="hljs-built_in"> number</span>[][] &#123;<br>    const n = adjMatrix.length;<br>    const results:<span class="hljs-built_in"> number</span>[][] = [];<br>    const visited:<span class="hljs-built_in"> boolean</span>[] = new Array(n).fill<span class="hljs-built_in">(false</span>);<br><br>  <span class="hljs-keyword">function</span> dfs(current:<span class="hljs-built_in"> number</span>, target:<span class="hljs-built_in"> number</span>,<span class="hljs-built_in"> path</span>:<span class="hljs-built_in"> number</span>[]) &#123;<br>    <span class="hljs-keyword">if</span> (current === target) &#123;<br>      results.push([..<span class="hljs-built_in">.path</span>]);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    visited[current] =<span class="hljs-built_in"> true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> <span class="hljs-keyword">next</span> = <span class="hljs-number">0</span>; <span class="hljs-keyword">next</span> &lt; n; <span class="hljs-keyword">next</span>++) &#123;<br>      <span class="hljs-keyword">if</span> (adjMatrix[current][<span class="hljs-keyword">next</span>] === <span class="hljs-number">1</span> &amp;&amp; !visited[<span class="hljs-keyword">next</span>]) &#123;<br>       <span class="hljs-built_in"> path</span>.push(<span class="hljs-keyword">next</span>);<br>        dfs(<span class="hljs-keyword">next</span>, target,<span class="hljs-built_in"> path</span>);<br>       <span class="hljs-built_in"> path</span>.pop();<br>      &#125;<br>    &#125;<br>    visited[current] =<span class="hljs-built_in"> false</span>;<br>  &#125;<br><br>  /**<br>   * 枚举所有 (i, j) 顶点对，i &lt; j 保证不重复<br>   * i 是起点<br>   * j 是终点（目标）<br>   *<span class="hljs-built_in"> path</span> 是当前已经走过的路径（起始只有 [i]）<br>   */<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>      dfs(i, j, [i]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> results;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个算法的神奇之处就是对不同的种类的图，得出来的时间复杂度是不一样的，针对有向有环图，时间复杂度普通情况是多项式级别的，最坏的是 n^2 * 2^n，虽然降低了时间复杂度，但是必然避免不了最欢的情况。所以丢弃了这个方案。同时也探索了 SCC 分治方法等其他枚举算法，时间复杂度也都很高，并且很路径数量是强相关的。</p></li></ol><p><strong>✨ – – 解决方案 – –</strong><br>🎯 调整思路，能被放在一起识别布局的，一定是被一个外接矩形框包含的，问题也就转换成只要枚举出所有的<code>包含任意个数元素矩形框</code>就行了，枚举出所有的包含矩形框,可以使用计算任意两个元素的外接矩形框，然后去重就行了。时间复杂度也就是 n^2,当然还有其他的条件限制外接矩形能不能成立，最终的时间复杂度是 n^3.下面是伪代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">enumerateRectangleCombinations</span>(<span class="hljs-params"></span><br><span class="hljs-params">  entity: Entity <span class="hljs-comment">// 包含所有宽高信息，以及唯一标识</span></span><br><span class="hljs-params"></span>)&#123;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; entity.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; entity.<span class="hljs-property">length</span>; j++) &#123;<br>      <span class="hljs-keyword">const</span> node1 = entity[i];<br>      <span class="hljs-keyword">const</span> node2 = entity[j];<br><br>      <span class="hljs-comment">// 计算两个节点形成的矩形边界</span><br>      <span class="hljs-keyword">const</span> rectangleBounds = <span class="hljs-title function_">calculateRectangleBounds</span>(node1, node2);<br><br>      <span class="hljs-comment">// 找出完全包含在矩形内的所有节点</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-attr">containedNodes</span>: <span class="hljs-title class_">Entity</span>[] = [];<br>      <span class="hljs-keyword">const</span> <span class="hljs-attr">containedIndices</span>: number[] = [];<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-title class_">Entity</span>.<span class="hljs-property">length</span>; k++) &#123;<br>        <span class="hljs-keyword">const</span> node = <span class="hljs-title class_">Entity</span>[k];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isNodeContainedInRectangle</span>(node, rectangleBounds)) &#123;<br>          containedNodes.<span class="hljs-title function_">push</span>(node);<br>          containedIndices.<span class="hljs-title function_">push</span>(k);<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// 检查矩形能不能成立</span><br>      <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; entityOrBlockSet.<span class="hljs-property">length</span>; k++) &#123;<br>        <span class="hljs-keyword">const</span> node = entityOrBlockSet[k];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isNodeIntersectingWithRectangle</span>(node, rectangleBounds)) &#123;<br>          flag = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功将指数级的时间复杂度降到 n^3，撒花 🎉。</p><h2 id="📝-总结">📝 总结</h2><p>💡 优化算法可以从两个方面入手：</p><ol><li>通过优化<strong>摆弄</strong><code>抽象的实物</code>的方式来使<strong>摆弄</strong>的次数少</li><li>在解决问题上面，减少可能性方案的数量</li></ol><p>🔥 今天对第 2 条感受很深。</p>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>nodejs 内存溢出</title>
    <link href="/2025/07/05/nodejs%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <url>/2025/07/05/nodejs%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="💾-nodejs-内存溢出">💾 nodejs 内存溢出</h2><p>在做<code>设计稿转布局代码</code>时，采用的任意个数元素形成若干个<code>组合</code>的方式来识别布局，由于组合的个数过多，导致内存溢出，程序崩溃。<br><img src="/img/heap_out_of_memory.jpg" alt="内存溢出截图"><br>📊 <strong>– – 回顾组合 – –</strong></p><p>从 $n$ 个不同元素里，取出 $k$ 个元素，不考虑顺序，得到的集合称为 <strong>组合</strong>。</p><p>公式：</p><p>$$<br>C(n, k) = \binom{n}{k} = \frac{n!}{k! \cdot (n-k)!}<br>$$</p><p>📝 例子：<br>从 $[A,B,C]$ 中取 2 个元素的组合是：</p><ul><li>$[A,B]$</li><li>$[A,C]$</li><li>$[B,C]$</li></ul><p>所有组合数之和是：</p><p>$$<br>\sum_{k=0}^{n} C(n,k) = 2^n<br>$$</p><p>⚠️ <strong>– – 回忆问题 – –</strong></p><p>如果 n = 39 的话，要生成所有<code>组合</code>, 一共有 5497 亿种组合，nodejs 程序依赖 v8 的内存分配，一般默认只有 1G ~ 2G 运行内存，在做 k=33 时，也就是 3,262,623(约 326 万)个组合的时候，内存增长了<code>1673.96MB</code>，然后就内存溢出了。</p><p>$$<br>\sum_{k=0}^{n} C(n,k) = 2^n = 549755813888<br>$$</p><p>🗺️ 简单估算一下一个数字型的数组，也就是<code>number[]</code>类型数据，占据多少内存。</p><p>🔢 <strong>javascript 数字存储方式</strong></p><p>在 JavaScript 中，所有数字都是以 IEEE 754 双精度浮点数(64 位)格式存储的，理论上每个数字占用 <code>8字节</code>。<br><code>[ 符号位 1 ] [ 指数 11 ] [ 尾数 52 ]</code></p><p>⚡ &gt; v8 对 SMI (Small Integer) 进行了优化，对于范围在 -2^30 到 2^30-1 之间的整数，SMI 直接存储在指针中，不需要额外的堆内存分配。在 64 位系统上，SMI 占用 8 字节（包含标记位）</p><p>📦 <strong>javascript 数组存储方式(Fast SMI Elements)</strong></p><blockquote><p>如果数组里都是 32 位有符号整数（SMI, Small Integer），V8 会直接用紧凑的方式存储这些整数。内存里是 连续的整数存储，几乎等价于 C++ 的 int[]。</p></blockquote><p>存储结构：<code>arr -&gt; [ 1 | 2 | 3 | 4 ]</code><br>对象头部：约 24-32 字节（包含类型信息、属性映射等）<br>length 属性：如果是 SMI，不占用额外堆内存<br>Elements 数组：存储实际元素的连续内存块</p><p>假设有一个包含 n 个小整数的密集数组：<code>const arr = [1, 2, 3, 4, 5];</code><br>内存占用约为：</p><ul><li>数组对象开销：~32 字节</li><li>5 个 SMI 整数：5 × 8 字节 = 40 字节</li><li>总计：~72 字节</li></ul><p>🧮 <strong>计算 n=39，k=33 时所有组合的内存大小</strong><br>带入所有数字计算：<br><code>(8 * 33 + 32) * 3262623 = 992,637,392B = 969,372 KB = 946.7 MB = 0.92 GB</code></p><p>也就是单纯这些数字数字，就有接近 1G，在我的程序中还有其他的业务逻辑，内存增长了<code>1673.96MB</code>，超出了内存。</p><h2 id="💡-解决方案">💡 解决方案</h2><p>不收集所有组合，每一次生成组合就去执行后续逻辑，而不是把所有组合都放在一个大数组里(<code>[组合1，组合2，...所有组合]</code>),再通过遍历的方式去执行后续逻辑。⚠️ 但是这样有有个问题，就是这么多个组合(5497 亿)，这种计算量级，不是一个普通服务器能跑完的，在这个项目中，我用 mac pro(8 核 16G)启动，跑 326 万个组合要 <code>10分钟</code>以上。所以也就只能优化算法，没错后面一篇是讲述我优化算法的经历。</p>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>部署paddlex,识别文字</title>
    <link href="/2025/06/15/ocr/%E9%83%A8%E7%BD%B2paddlex,%E8%AF%86%E5%88%AB%E6%96%87%E5%AD%97/"/>
    <url>/2025/06/15/ocr/%E9%83%A8%E7%BD%B2paddlex,%E8%AF%86%E5%88%AB%E6%96%87%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="直接部署-paddlex">直接部署 paddlex</h2><ol><li><p><code>docker pull ccr-2vdh3abv-pub.cnc.bj.baidubce.com/paddlex/paddlex:paddlex3.0.1-paddlepaddle3.0.0-cpu</code></p></li><li><p>创建容器并进如终端：第一个是 M1 芯片的 mac，第二个事 linux x86</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -it --name paddlex-server <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --platform linux/amd64 <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -v $PWD:/paddle <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --shm-size=<span class="hljs-number">8</span>g <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">5001</span>:<span class="hljs-number">5001</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  ccr-<span class="hljs-number">2</span>vdh3abv-pub.cnc.bj.baidubce.com/paddlex/paddlex:paddlex3.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-paddlepaddle3.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-cpu <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  /bin/bash<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -it --name paddlex-server <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -v $PWD:/paddle <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --shm-size=<span class="hljs-number">8</span>g <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">5001</span>:<span class="hljs-number">5001</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  ccr-<span class="hljs-number">2</span>vdh3abv-pub.cnc.bj.baidubce.com/paddlex/paddlex:paddlex3.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-paddlepaddle3.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-cpu <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  /bin/bash<br></code></pre></td></tr></table></figure></li><li><p>在容器里面安装 API 服务包：<code>paddlex --install serving</code></p></li><li><p>安装依赖：<code>pip3 install &quot;paddlex[ocr]==3.0.1&quot;</code></p></li><li><p>启动服务：<code>paddlex --serve --pipeline OCR --port 5001</code></p></li><li><p>步骤 5 这种启动会导致结束进程，paddlex 服务就不在了。<code>docker exec -it 6d087391d28e /bin/bash -c &quot;nohup paddlex --serve --pipeline OCR --host 0.0.0.0 --port 5001&quot;</code>或有日志：<code>docker exec -it 6d087391d28e /bin/bash -c &quot;nohup paddlex --serve --pipeline OCR --host 0.0.0.0 --port 5001 &gt; serve.log 2&gt;&amp;1 &amp;&quot;</code> 6d087391d28e 是容器名字。</p></li><li><p>测试接口:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp">curl -X POST http:<span class="hljs-comment">//localhost:5001/ocr \</span><br><span class="hljs-comment">-H &quot;Content-Type: application/json&quot; \</span><br><span class="hljs-comment">-d &#x27;&#123;</span><br><span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;https://imagev2.xmcdn.com/storages/ef1b-audiofreehighqps/A9/E5/GKwRIRwMIDZVAAAU8APGHO9Z.png&quot;</span>,<br><span class="hljs-string">&quot;fileType&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;useDocOrientationClassify&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;useDocUnwarping&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;useTextlineOrientation&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;textDetLimitSideLen&quot;</span>: <span class="hljs-number">736</span>,<br><span class="hljs-string">&quot;textDetLimitType&quot;</span>: <span class="hljs-string">&quot;min&quot;</span>,<br><span class="hljs-string">&quot;textDetThresh&quot;</span>: <span class="hljs-number">0.4</span>,<br><span class="hljs-string">&quot;textDetBoxThresh&quot;</span>: <span class="hljs-number">0.5</span>,<br><span class="hljs-string">&quot;textDetUnclipRatio&quot;</span>: <span class="hljs-number">1.8</span>,<br><span class="hljs-string">&quot;textRecScoreThresh&quot;</span>: <span class="hljs-number">0.5</span><br>&#125;&#x27;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs scilab">curl -X POST http:<span class="hljs-comment">//localhost:5001/ocr \</span><br> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> \<br> -d <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">&quot;</span>file<span class="hljs-string">&quot;: &quot;</span>https:<span class="hljs-comment">//imagev2.xmcdn.com/storages/ef1b-audiofreehighqps/A9/E5/GKwRIRwMIDZVAAAU8APGHO9Z.png&quot;,</span><br> <span class="hljs-string">&quot;returnVisualize&quot;</span>: false<br>&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">curl -X POST http://127.0.0.1:5001/ocr \</span><br><span class="hljs-string"> -H &quot;</span>Content-Type: application/json<span class="hljs-string">&quot; \</span><br><span class="hljs-string"> -d &#x27;</span>&#123;<br><span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;https://imagev2.xmcdn.com/storages/ef1b-audiofreehighqps/A9/E5/GKwRIRwMIDZVAAAU8APGHO9Z.png&quot;</span><br>&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">curl -X POST https://www.qunyangbang.cn/ocr/ocr \</span><br><span class="hljs-string"> -H &quot;</span>Content-Type: application/json<span class="hljs-string">&quot; \</span><br><span class="hljs-string"> -d &#x27;</span>&#123;<br><span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;https://imagev2.xmcdn.com/storages/ef1b-audiofreehighqps/A9/E5/GKwRIRwMIDZVAAAU8APGHO9Z.png&quot;</span>,<br><span class="hljs-string">&quot;hideOCRImage&quot;</span>: true,<br><span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span><br>&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">curl -X &#x27;</span>GET&#x27; \<br> <span class="hljs-string">&#x27;http://localhost:5001/health&#x27;</span> \<br> -H <span class="hljs-string">&#x27;accept: application/json&#x27;</span><br><br></code></pre></td></tr></table></figure><ol start="8"><li><p>修改下面两个文件，增加接口参数<code>hideOCRImage</code>，控制接口返回字段。(文件地址：<code>/var/lib/docker/overlay2/c625c7c4a365d03b3ddd293b65d01d572538b8e23bd8136ae9a54451af3cba81/merged/root/PaddleX</code>)<br><code>paddlex/inference/serving/basic_serving/_pipeline_apps/ocr.py</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 根据 hideOCRImage 字段决定是否包含所有图像字段</span><br>result_dict = &#123;<span class="hljs-string">&quot;prunedResult&quot;</span>: pruned_res&#125;<br><br><span class="hljs-comment"># 只有当 hideOCRImage 不为 True 时才包含所有图像字段</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.hideOCRImage:<br>    result_dict[<span class="hljs-string">&quot;ocrImage&quot;</span>] = imgs.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;ocr_img&quot;</span>)<br>    result_dict[<span class="hljs-string">&quot;docPreprocessingImage&quot;</span>] = imgs.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;doc_preprocessing_img&quot;</span>)<br>    result_dict[<span class="hljs-string">&quot;inputImage&quot;</span>] = imgs.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;input_img&quot;</span>)<br><br>ocr_results.append(result_dict)<br><br></code></pre></td></tr></table></figure><p><code>paddlex/inference/serving/schemas/ocr.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">InferRequest</span>(ocr.BaseInferRequest):<br>    useDocOrientationClassify: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">bool</span>] = <span class="hljs-literal">None</span><br>    useDocUnwarping: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">bool</span>] = <span class="hljs-literal">None</span><br>    useTextlineOrientation: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">bool</span>] = <span class="hljs-literal">None</span><br>    textDetLimitSideLen: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span><br>    textDetLimitType: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># Better to use &quot;threshold&quot;? Be consistent with the pipeline API though.</span><br>    textDetThresh: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">float</span>] = <span class="hljs-literal">None</span><br>    textDetBoxThresh: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">float</span>] = <span class="hljs-literal">None</span><br>    textDetUnclipRatio: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">float</span>] = <span class="hljs-literal">None</span><br>    textRecScoreThresh: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">float</span>] = <span class="hljs-literal">None</span><br>    hideOCRImage: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">bool</span>] = <span class="hljs-literal">None</span> <span class="hljs-comment"># 这行</span><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="nginx-配置">nginx 配置</h3><p>主要是访问的时候增加/ocr 前缀，在 nginx 这里去掉</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /ocr &#123;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/ocr/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5001/;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="报错">报错</h3><ol><li>访问/docs 接口来看文档，报错：<br><img src="./image.png" alt="image"><br>解决：降低 serving 版本，<code>pip install &quot;paddlex[serving]==3.0.0&quot;</code></li></ol><h3 id="参考">参考</h3><ol><li>paddlex 文档：<a href="https://paddlepaddle.github.io/PaddleX/latest/index.html">https://paddlepaddle.github.io/PaddleX/latest/index.html</a></li><li>paddlex 本地安装：<a href="https://paddlepaddle.github.io/PaddleX/latest/installation/installation.html">https://paddlepaddle.github.io/PaddleX/latest/installation/installation.html</a></li><li>PaddleX 服务化部署指南：<a href="https://paddlepaddle.github.io/PaddleX/latest/pipeline_deploy/serving.html">https://paddlepaddle.github.io/PaddleX/latest/pipeline_deploy/serving.html</a></li><li>paddlepaddle 安装：<a href="https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/docker/macos-docker.html">https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/docker/macos-docker.html</a></li><li>PaddlePaddle docker 镜像安装：<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/install/docker/linux-docker.html#anchor-0">https://www.paddlepaddle.org.cn/documentation/docs/zh/install/docker/linux-docker.html#anchor-0</a></li><li>PaddleOCR 本地安装，本地开发：<a href="https://paddlepaddle.github.io/PaddleOCR/latest/version3.x/installation.html">https://paddlepaddle.github.io/PaddleOCR/latest/version3.x/installation.html</a></li><li>PP-StructureV3 产线使用教程：<a href="https://paddlepaddle.github.io/PaddleOCR/latest/version3.x/pipeline_usage/PP-StructureV3.html">https://paddlepaddle.github.io/PaddleOCR/latest/version3.x/pipeline_usage/PP-StructureV3.html</a></li><li>单字坐标返回：<a href="https://github.com/PaddlePaddle/PaddleOCR/pull/10515">https://github.com/PaddlePaddle/PaddleOCR/pull/10515</a><ul><li><code> --return_word_box=True</code>参数</li></ul></li></ol><h2 id="命令参考">命令参考</h2><ol><li><p>搭建 docker：<a href="https://cloud.tencent.com/document/product/213/46000#azYB6haoacR0zO9ry1cHx">https://cloud.tencent.com/document/product/213/46000#azYB6haoacR0zO9ry1cHx</a></p><ol><li><code>sudo yum install docker -y</code></li><li><code>sudo systemctl start docker</code></li><li><code>sudo docker info</code></li></ol></li><li><p>使用 docker 安装 paddleOCR：<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/install/docker/linux-docker.html#anchor-0">参考 1</a>;<a href="https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/docker/linux-docker.html">参考 2</a></p><ol><li>拉取预安装 PaddlePaddle 的镜像：<code>docker pull ccr-2vdh3abv-pub.cnc.bj.baidubce.com/paddlepaddle/paddle:3.0.0</code></li><li>用镜像构建并进入 Docker 容器：<code>docker run --name paddle -it -v $PWD:/paddle ccr-2vdh3abv-pub.cnc.bj.baidubce.com/paddlepaddle/paddle:3.0.0 /bin/bash</code><ol><li>第二次直接进入容器：<code>docker exec -it paddlex-server /bin/bash</code></li><li>查看所有的容器：<code>docker ps -a</code></li><li>查看所有镜像：<code>docker images</code></li><li>停止容器运行：<code>docker stop paddle</code></li><li>删除容器：<code>docker rm paddle</code></li><li>删除镜像：<code>docker rmi a5d1b6184e99</code></li><li>删除所有镜像：<code>docker rmi $(docker images -q)</code></li><li>启动容器：<code> docker start paddle_server</code></li><li>查看容器映射宿主机的路径：<code>docker inspect paddlex-server</code></li><li>查看容器内的进程 id：<code>ps aux | grep &quot;paddlex --serve&quot;</code></li></ol></li><li>在容器中下载 PaddleOCR 源码：<code>git clone https://github.com/PaddlePaddle/PaddleOCR.git</code>或者 gitee 的仓库：<code>git clone https://gitee.com/paddlepaddle/PaddleOCR</code></li><li>进入项目，切换指定分支：<code>cd PaddleOCR &amp;&amp; git checkout release/3.0</code></li><li>安装依赖：<code>pip3 install -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</code></li><li>设置清华源：<code>pip3 config set global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</code></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MasterGo MCP 尝试</title>
    <link href="/2025/05/15/masterGo_MCP/"/>
    <url>/2025/05/15/masterGo_MCP/</url>
    
    <content type="html"><![CDATA[<h2 id="使用">使用</h2><ol><li><p>复制以下代码到 mcp.json 文件中 (权限问题，7 月 10 号之前凭借 token，任意用户都可以，之后只能编辑席位和研发席位的 token 可以访问 mcp，原文地址：<a href="https://mastergo.com/static/advance-notice-prototype.html">https://mastergo.com/static/advance-notice-prototype.html</a>)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>  <span class="hljs-string">&quot;mcpServers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;mastergo-magic-mcp&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;npx&quot;</span>,<br>      <span class="hljs-string">&quot;args&quot;</span>: [<br>        <span class="hljs-string">&quot;-y&quot;</span>,<br>        <span class="hljs-string">&quot;<span class="hljs-variable">@mastergo</span>/magic-mcp&quot;</span>,<br>        <span class="hljs-string">&quot;--token=MG_MCP_TOKEN&quot;</span>,<br>        <span class="hljs-string">&quot;--url=https://mastergo.com&quot;</span><br>      ],<br>      <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;NPM_CONFIG_REGISTRY&quot;</span>: <span class="hljs-string">&quot;https://registry.npmjs.org/&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img2/masterGo_MCP_1.jpg" alt="image"></p></li><li><p>获取 token，替换 mcp.json 文件中的&lt;MG_MCP_TOKEN&gt;<br><img src="/img2/masterGo_MCP_2.jpg" alt="image"><br><img src="/img2/masterGo_MCP_3.jpg" alt="image"></p></li><li><p>保存后，回到设置页面，如果显示绿色，并且出现了 Tools 有 mcp__getDSL 就是成功了。</p></li><li><p>来到 MasterGo 中，选中一个图层，此时图层是 frame 类型的话，链接上会增加 layerId 参数，然后复制链接<br><img src="/img2/masterGo_MCP_4.jpg" alt="image"></p></li><li><p>复制 URL 到 cursor 中，输入一下 prompt 进行生成代码<br><img src="/img2/masterGo_MCP_5.jpg" alt="image"></p></li><li><p>以下三个生成效果：图 1 是官方 demo、图 2 是收听领奖的整个页面、图 3 是单个按钮。<br><img src="/img2/masterGo_MCP_6.jpg" alt="image"><br><img src="/img2/masterGo_MCP_7.jpg" alt="image"><br><img src="/img2/masterGo_MCP_8.jpg" alt="image"></p></li></ol><h3 id="探索-MCP-实现原理">探索 MCP 实现原理</h3><ol><li><p>插件 github 地址：<a href="https://github.com/mastergo-design/mastergo-magic-mcp">https://github.com/mastergo-design/mastergo-magic-mcp</a></p></li><li><p>插件提供 mcp 工具：</p><ul><li>mcp__getDsl，描述如下，概括为：提供 fileId 和 layerId 字段，返回原始的 DSL。包含所有信息。</li></ul><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><br><span class="hljs-comment">&quot;Use this tool to retrieve the DSL (Domain Specific Language) data from MasterGo design files and the rules you must follow when generating code.</span><br><span class="hljs-comment">This tool is useful when you need to analyze the structure of a design, understand component hierarchy, or extract design properties.</span><br><span class="hljs-comment">You must provide a fileId and layerId to identify the specific design element.</span><br><span class="hljs-comment">This tool returns the raw DSL data in JSON format that you can then parse and analyze.</span><br><span class="hljs-comment">This tool also returns the rules you must follow when generating code.</span><br><span class="hljs-comment">The DSL data can also be used to transform and generate code for different frameworks.&quot;</span><br><br></code></pre></td></tr></table></figure></li></ol><ul><li><p>mcp__getComponentLink，描述如下，概括为：当 mcp_getDsl 返回的数据包含 componentDocumentLinks 数组时。获取到每个组件的文档(masterGo 样式组件的文档),根据文档信息生成对应的组件。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br>When <span class="hljs-keyword">the</span> data returned <span class="hljs-keyword">by</span> mcp\*\*getDsl <span class="hljs-keyword">contains</span> <span class="hljs-keyword">a</span> non-<span class="hljs-literal">empty</span> componentDocumentLinks array, this tool is used <span class="hljs-built_in">to</span> sequentially retrieve URLs <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> componentDocumentLinks array <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> obtain component documentation data. The returned document data is used <span class="hljs-keyword">for</span> you <span class="hljs-built_in">to</span> generate frontend code based <span class="hljs-keyword">on</span> <span class="hljs-title">components</span>.<br></code></pre></td></tr></table></figure></li><li><p>mcp__getMeta，描述如下，概括为：用来给用户构建一个完整的网站，或者高级网站。提供 fileId 和 layerId 字段，返回网站和页面的规则和结果(在 masterGo 中的图层，图层里有规则和信息)。cursor 会根据元信息，生成 <a href="http://task.md">task.md</a>，然后去递归的去寻找 masterGo 设计页面，然后逐一生成页面，并且会加上 mete 信息里的跳转，或者其他事件。使用链接：<a href="https://mastergo.com/file/155675508499265?fileOpenFrom=home&amp;page_id=8740%3A3698&amp;devMode=true">https://mastergo.com/file/155675508499265?fileOpenFrom=home&amp;page_id=8740%3A3698&amp;devMode=true</a></p></li><li><p>mcp__getComponentGenerator，描述如下，概括为，提供 rootPath、fileId、layerId，返回组件开发工作流的文件(<a href="http://component-workflow.md">component-workflow.md</a>)，让 cursor 根据 <a href="http://component-workflow.md">component-workflow.md</a> 规则开发组件。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>Users need <span class="hljs-keyword">to</span> actively <span class="hljs-keyword">call</span> this tool <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> the component development workflow. <span class="hljs-keyword">When</span> Generator <span class="hljs-keyword">is</span> mentioned, please actively <span class="hljs-keyword">call</span> this tool.<br>This tool provides a structured workflow <span class="hljs-keyword">for</span> component development <span class="hljs-keyword">following</span> best practices.<br>You must provide an absolute rootPath <span class="hljs-keyword">of</span> workspace <span class="hljs-keyword">to</span> save workflow files.<br><br></code></pre></td></tr></table></figure></li><li><p>mcp__getDsl 返回结果和 masterGo 插件中的 DSL 比较，概括为，几乎完全不一样的字段，MCP 返回的 DSL 数据中的样式数据是稍加处理过的。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><br>&#123;<br>  <span class="hljs-string">&quot;dsl&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;styles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;paint_1:0363&quot;</span>: &#123; <span class="hljs-string">&quot;value&quot;</span>: [<span class="hljs-string">&quot;#FFFFFF&quot;</span>], <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;Whites/White&quot;</span> &#125;,<br>      <span class="hljs-string">&quot;effect_1:0365&quot;</span>: &#123; <span class="hljs-string">&quot;value&quot;</span>: [<span class="hljs-string">&quot;box-shadow: 0px 0px 0px 20px rgba(0, 0, 0, 0.02);&quot;</span>], <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;box shadow&quot;</span> &#125;,<br>      <span class="hljs-string">&quot;paint_1:0404&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: [<br>          &#123;<br>            <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://image-resource.mastergo.com/57000091966935/57000091966937/6d01dc22287b99530477ebcb8831f8bb.png&quot;</span>,<br>            <span class="hljs-string">&quot;filters&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>          &#125;<br>        ]<br>      &#125;,<br>      <span class="hljs-string">&quot;paint_1:0373&quot;</span>: &#123; <span class="hljs-string">&quot;value&quot;</span>: [<span class="hljs-string">&quot;#313237&quot;</span>], <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;Blacks/High emphasis&quot;</span> &#125;,<br>      <span class="hljs-string">&quot;font_1:0372&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;family&quot;</span>: <span class="hljs-string">&quot;Amiko-Bold&quot;</span>,<br>          <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">25</span>,<br>          <span class="hljs-string">&quot;decoration&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;case&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;lineHeight&quot;</span>: <span class="hljs-string">&quot;33.79999923706055&quot;</span>,<br>          <span class="hljs-string">&quot;letterSpacing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;Headings/Heading&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;paint_1:0379&quot;</span>: &#123; <span class="hljs-string">&quot;value&quot;</span>: [<span class="hljs-string">&quot;#718797&quot;</span>], <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;Blacks/Mid emphasis&quot;</span> &#125;,<br>      <span class="hljs-string">&quot;font_1:0378&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;family&quot;</span>: <span class="hljs-string">&quot;Inter-Regular&quot;</span>,<br>          <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">16</span>,<br>          <span class="hljs-string">&quot;decoration&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;case&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;lineHeight&quot;</span>: <span class="hljs-string">&quot;26.399999618530273&quot;</span>,<br>          <span class="hljs-string">&quot;letterSpacing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;Body/body&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;paint_1:0401&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: [<br>          &#123;<br>            <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://image-resource.mastergo.com/57000091966935/57000091966937/b253f033eb4e3f396f8ee23280a1b034.png&quot;</span>,<br>            <span class="hljs-string">&quot;filters&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>          &#125;<br>        ]<br>      &#125;,<br>      <span class="hljs-string">&quot;font_1:0399&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;family&quot;</span>: <span class="hljs-string">&quot;Inter-SemiBold&quot;</span>,<br>          <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">16</span>,<br>          <span class="hljs-string">&quot;decoration&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;case&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;lineHeight&quot;</span>: <span class="hljs-string">&quot;26.399999618530273&quot;</span>,<br>          <span class="hljs-string">&quot;letterSpacing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;Body/BodyBold&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;font_1:0395&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;family&quot;</span>: <span class="hljs-string">&quot;Inter-Regular&quot;</span>,<br>          <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">12</span>,<br>          <span class="hljs-string">&quot;decoration&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;case&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>          <span class="hljs-string">&quot;lineHeight&quot;</span>: <span class="hljs-string">&quot;16.799999237060547&quot;</span>,<br>          <span class="hljs-string">&quot;letterSpacing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;Other/caption&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;paint_1:0383&quot;</span>: &#123; <span class="hljs-string">&quot;value&quot;</span>: [] &#125;,<br>      <span class="hljs-string">&quot;paint_1:0387&quot;</span>: &#123; <span class="hljs-string">&quot;value&quot;</span>: [<span class="hljs-string">&quot;#5374FF&quot;</span>], <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;AppColors/ppl&quot;</span> &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;nodes&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FRAME&quot;</span>,<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0222&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;simple layer 1&quot;</span>,<br>        <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">540</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">680</span>, <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">0</span> &#125;,<br>        <span class="hljs-string">&quot;fill&quot;</span>: <span class="hljs-string">&quot;paint_1:0363&quot;</span>,<br>        <span class="hljs-string">&quot;children&quot;</span>: [<br>          &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;LAYER&quot;</span>,<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0245&quot;</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Rectangle 8&quot;</span>,<br>            <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">380.2801208496094</span>, <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">20</span> &#125;,<br>            <span class="hljs-string">&quot;flexShrink&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;borderRadius&quot;</span>: <span class="hljs-string">&quot;10px&quot;</span>,<br>            <span class="hljs-string">&quot;fill&quot;</span>: <span class="hljs-string">&quot;paint_1:0404&quot;</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FRAME&quot;</span>,<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0223&quot;</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Frame 42&quot;</span>,<br>            <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">500</span>,<br>              <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">259.7198791503906</span>,<br>              <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">20</span>,<br>              <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">400.2801208496094</span><br>            &#125;,<br>            <span class="hljs-string">&quot;flexGrow&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;flexShrink&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;children&quot;</span>: [<br>              &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FRAME&quot;</span>,<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0224&quot;</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Frame 30&quot;</span>,<br>                <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">460</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">121</span>, <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">40</span> &#125;,<br>                <span class="hljs-string">&quot;flexShrink&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&quot;children&quot;</span>: [<br>                  &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,<br>                    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0225&quot;</span>,<br>                    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Use the bluetooth SMS andwidth, then you can&quot;</span>,<br>                    <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">460</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">68</span> &#125;,<br>                    <span class="hljs-string">&quot;flexShrink&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-string">&quot;text&quot;</span>: [&#123; <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Use the bluetooth SMS andwidth, then you can&quot;</span>, <span class="hljs-string">&quot;font&quot;</span>: <span class="hljs-string">&quot;font_1:0372&quot;</span> &#125;],<br>                    <span class="hljs-string">&quot;textColor&quot;</span>: [&#123; <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">44</span>, <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;paint_1:0373&quot;</span> &#125;],<br>                    <span class="hljs-string">&quot;textAlign&quot;</span>: <span class="hljs-string">&quot;left&quot;</span>,<br>                    <span class="hljs-string">&quot;textMode&quot;</span>: <span class="hljs-string">&quot;auto-height&quot;</span><br>                  &#125;,<br>                  &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,<br>                    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0228&quot;</span>,<br>                    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Compressing the monitor won&#x27;t do anything, we need to synthesize the cross-platform HTTP feed.&quot;</span>,<br>                    <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">460</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">53</span>, <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">68</span> &#125;,<br>                    <span class="hljs-string">&quot;flexShrink&quot;</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-string">&quot;text&quot;</span>: [<br>                      &#123;<br>                        <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Compressing the monitor won&#x27;t do anything, we need to synthesize the cross-platform HTTP feed.&quot;</span>,<br>                        <span class="hljs-string">&quot;font&quot;</span>: <span class="hljs-string">&quot;font_1:0378&quot;</span><br>                      &#125;<br>                    ],<br>                    <span class="hljs-string">&quot;textColor&quot;</span>: [&#123; <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">94</span>, <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;paint_1:0379&quot;</span> &#125;],<br>                    <span class="hljs-string">&quot;textAlign&quot;</span>: <span class="hljs-string">&quot;left&quot;</span>,<br>                    <span class="hljs-string">&quot;textMode&quot;</span>: <span class="hljs-string">&quot;auto-height&quot;</span><br>                  &#125;<br>                ],<br>                <span class="hljs-string">&quot;flexContainerInfo&quot;</span>: &#123; <span class="hljs-string">&quot;flexDirection&quot;</span>: <span class="hljs-string">&quot;column&quot;</span>, <span class="hljs-string">&quot;mainSizing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>, <span class="hljs-string">&quot;crossSizing&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span> &#125;<br>              &#125;,<br>              &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FRAME&quot;</span>,<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0231&quot;</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Frame 31&quot;</span>,<br>                <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">460</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">44</span>, <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">195.71987915039062</span> &#125;,<br>                <span class="hljs-string">&quot;flexShrink&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&quot;children&quot;</span>: [<br>                  &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;GROUP&quot;</span>,<br>                    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0235&quot;</span>,<br>                    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Group 1&quot;</span>,<br>                    <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">194</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">44</span> &#125;,<br>                    <span class="hljs-string">&quot;children&quot;</span>: [<br>                      &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FRAME&quot;</span>,<br>                        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0236&quot;</span>,<br>                        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Frame 23&quot;</span>,<br>                        <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">194</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">44</span> &#125;,<br>                        <span class="hljs-string">&quot;children&quot;</span>: [<br>                          &#123;<br>                            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;LAYER&quot;</span>,<br>                            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0237&quot;</span>,<br>                            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Rectangle 19&quot;</span>,<br>                            <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">2</span> &#125;,<br>                            <span class="hljs-string">&quot;borderRadius&quot;</span>: <span class="hljs-string">&quot;155px&quot;</span>,<br>                            <span class="hljs-string">&quot;fill&quot;</span>: <span class="hljs-string">&quot;paint_1:0401&quot;</span><br>                          &#125;,<br>                          &#123;<br>                            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FRAME&quot;</span>,<br>                            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0238&quot;</span>,<br>                            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Frame 24&quot;</span>,<br>                            <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">144</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">44</span>, <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">50</span> &#125;,<br>                            <span class="hljs-string">&quot;children&quot;</span>: [<br>                              &#123;<br>                                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,<br>                                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0239&quot;</span>,<br>                                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Darlene Robertson&quot;</span>,<br>                                <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">144</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">27</span> &#125;,<br>                                <span class="hljs-string">&quot;text&quot;</span>: [&#123; <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Darlene Robertson&quot;</span>, <span class="hljs-string">&quot;font&quot;</span>: <span class="hljs-string">&quot;font_1:0399&quot;</span> &#125;],<br>                                <span class="hljs-string">&quot;textColor&quot;</span>: [&#123; <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">17</span>, <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;paint_1:0373&quot;</span> &#125;],<br>                                <span class="hljs-string">&quot;textAlign&quot;</span>: <span class="hljs-string">&quot;left&quot;</span>,<br>                                <span class="hljs-string">&quot;textMode&quot;</span>: <span class="hljs-string">&quot;single-line&quot;</span><br>                              &#125;,<br>                              &#123;<br>                                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;TEXT&quot;</span>,<br>                                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0242&quot;</span>,<br>                                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;March 12, 2021&quot;</span>,<br>                                <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">87</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">17</span>, <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">27</span> &#125;,<br>                                <span class="hljs-string">&quot;text&quot;</span>: [&#123; <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;March 12, 2021&quot;</span>, <span class="hljs-string">&quot;font&quot;</span>: <span class="hljs-string">&quot;font_1:0395&quot;</span> &#125;],<br>                                <span class="hljs-string">&quot;textColor&quot;</span>: [&#123; <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;end&quot;</span>: <span class="hljs-number">14</span>, <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;paint_1:0379&quot;</span> &#125;],<br>                                <span class="hljs-string">&quot;textAlign&quot;</span>: <span class="hljs-string">&quot;left&quot;</span>,<br>                                <span class="hljs-string">&quot;textMode&quot;</span>: <span class="hljs-string">&quot;single-line&quot;</span><br>                              &#125;<br>                            ],<br>                            <span class="hljs-string">&quot;flexContainerInfo&quot;</span>: &#123;<br>                              <span class="hljs-string">&quot;flexDirection&quot;</span>: <span class="hljs-string">&quot;column&quot;</span>,<br>                              <span class="hljs-string">&quot;mainSizing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,<br>                              <span class="hljs-string">&quot;crossSizing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span><br>                            &#125;<br>                          &#125;<br>                        ],<br>                        <span class="hljs-string">&quot;flexContainerInfo&quot;</span>: &#123;<br>                          <span class="hljs-string">&quot;flexDirection&quot;</span>: <span class="hljs-string">&quot;row&quot;</span>,<br>                          <span class="hljs-string">&quot;alignItems&quot;</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>                          <span class="hljs-string">&quot;mainSizing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,<br>                          <span class="hljs-string">&quot;crossSizing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,<br>                          <span class="hljs-string">&quot;gap&quot;</span>: <span class="hljs-string">&quot;10px&quot;</span><br>                        &#125;<br>                      &#125;<br>                    ]<br>                  &#125;,<br>                  &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;FRAME&quot;</span>,<br>                    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0232&quot;</span>,<br>                    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;bi:arrow-right-short&quot;</span>,<br>                    <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">40</span>, <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">420</span> &#125;,<br>                    <span class="hljs-string">&quot;fill&quot;</span>: <span class="hljs-string">&quot;paint_1:0383&quot;</span>,<br>                    <span class="hljs-string">&quot;children&quot;</span>: [<br>                      &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;GROUP&quot;</span>,<br>                        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0233&quot;</span>,<br>                        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Group&quot;</span>,<br>                        <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123;<br>                          <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">20.002233505249023</span>,<br>                          <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">17.50320053100586</span>,<br>                          <span class="hljs-string">&quot;relativeX&quot;</span>: <span class="hljs-number">10</span>,<br>                          <span class="hljs-string">&quot;relativeY&quot;</span>: <span class="hljs-number">11.248419761657715</span><br>                        &#125;,<br>                        <span class="hljs-string">&quot;children&quot;</span>: [<br>                          &#123;<br>                            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;PATH&quot;</span>,<br>                            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;158:0234&quot;</span>,<br>                            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Vector&quot;</span>,<br>                            <span class="hljs-string">&quot;layoutStyle&quot;</span>: &#123; <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">20.002233505249023</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">17.50320053100586</span> &#125;,<br>                            <span class="hljs-string">&quot;path&quot;</span>: [<br>                              &#123;<br>                                <span class="hljs-string">&quot;fill&quot;</span>: <span class="hljs-string">&quot;paint_1:0387&quot;</span>,<br>                                <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;M6.96159e-30 8.75158C-1.11022e-15 8.42006 0.131696 8.10212 0.366117 7.8677C0.600537 7.63328 0.918479 7.50158 1.25 7.50158C1.25 7.50158 15.7325 7.50158 15.7325 7.50158C15.7325 7.50158 10.365 2.13658 10.365 2.13658C10.1303 1.90186 9.99842 1.58352 9.99842 1.25158C9.99842 0.91964 10.1303 0.601296 10.365 0.366579C10.5997 0.131863 10.9181 0 11.25 0C11.5819 0 11.9003 0.131863 12.135 0.366579C12.135 0.366579 19.635 7.86658 19.635 7.86658C19.7514 7.98269 19.8438 8.12063 19.9068 8.2725C19.9698 8.42436 20.0022 8.58716 20.0022 8.75158C20.0022 8.916 19.9698 9.0788 19.9068 9.23066C19.8438 9.38253 19.7514 9.52047 19.635 9.63658C19.635 9.63658 12.135 17.1366 12.135 17.1366C11.9003 17.3713 11.5819 17.5032 11.25 17.5032C10.9181 17.5032 10.5997 17.3713 10.365 17.1366C10.1303 16.9019 9.99842 16.5835 9.99842 16.2516C9.99842 15.9196 10.1303 15.6013 10.365 15.3666C10.365 15.3666 15.7325 10.0016 15.7325 10.0016C15.7325 10.0016 1.25 10.0016 1.25 10.0016C0.918479 10.0016 0.600537 9.86988 0.366117 9.63546C0.131696 9.40104 -1.11022e-15 9.0831 6.96159e-30 8.75158C6.96159e-30 8.75158 6.96159e-30 8.75158 6.96159e-30 8.75158Z&quot;</span><br>                              &#125;<br>                            ]<br>                          &#125;<br>                        ]<br>                      &#125;<br>                    ]<br>                  &#125;<br>                ],<br>                <span class="hljs-string">&quot;flexContainerInfo&quot;</span>: &#123;<br>                  <span class="hljs-string">&quot;flexDirection&quot;</span>: <span class="hljs-string">&quot;row&quot;</span>,<br>                  <span class="hljs-string">&quot;justifyContent&quot;</span>: <span class="hljs-string">&quot;space-between&quot;</span>,<br>                  <span class="hljs-string">&quot;mainSizing&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span>,<br>                  <span class="hljs-string">&quot;crossSizing&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,<br>                  <span class="hljs-string">&quot;gap&quot;</span>: <span class="hljs-string">&quot;135px&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;borderRadius&quot;</span>: <span class="hljs-string">&quot;10px&quot;</span><br>              &#125;<br>            ],<br>            <span class="hljs-string">&quot;flexContainerInfo&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;flexDirection&quot;</span>: <span class="hljs-string">&quot;column&quot;</span>,<br>              <span class="hljs-string">&quot;justifyContent&quot;</span>: <span class="hljs-string">&quot;space-between&quot;</span>,<br>              <span class="hljs-string">&quot;mainSizing&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span>,<br>              <span class="hljs-string">&quot;crossSizing&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span>,<br>              <span class="hljs-string">&quot;padding&quot;</span>: <span class="hljs-string">&quot;40px 20px 20px&quot;</span><br>            &#125;<br>          &#125;<br>        ],<br>        <span class="hljs-string">&quot;effect&quot;</span>: <span class="hljs-string">&quot;effect_1:0365&quot;</span>,<br>        <span class="hljs-string">&quot;flexContainerInfo&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;flexDirection&quot;</span>: <span class="hljs-string">&quot;column&quot;</span>,<br>          <span class="hljs-string">&quot;justifyContent&quot;</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>          <span class="hljs-string">&quot;alignItems&quot;</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>          <span class="hljs-string">&quot;mainSizing&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span>,<br>          <span class="hljs-string">&quot;crossSizing&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span>,<br>          <span class="hljs-string">&quot;padding&quot;</span>: <span class="hljs-string">&quot;20px&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;borderRadius&quot;</span>: <span class="hljs-string">&quot;10px&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;components&quot;</span>: []<br>  &#125;,<br>  <span class="hljs-string">&quot;componentDocumentLinks&quot;</span>: [],<br>  <span class="hljs-string">&quot;rules&quot;</span>: [<br>    <span class="hljs-string">&quot;token filed must be generated as a variable (colors, shadows, fonts, etc.) and the token field must be displayed in the comment&quot;</span>,<br>    <span class="hljs-string">&quot;\n            componentDocumentLinks is a list of frontend component documentation links used in the DSL layer, designed to help you understand how to use the components.\n            When it exists and is not empty, you need to use mcp__getComponentLink in a for loop to get the URL content of all components in the list, understand how to use the components, and generate code using the components.\n            For example: \n              ```js  \n                const componentDocumentLinks = [\n                  &#x27;https://example.com/ant/button.mdx&#x27;,\n                  &#x27;https://example.com/ant/button.mdx&#x27;\n                ]\n                for (const url of componentDocumentLinks) &#123;\n                  const componentLink = await mcp__getComponentLink(url);\n                  console.log(componentLink);\n                &#125;\n              ```\n          &quot;</span><br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img2/masterGo_MCP_9.jpg" alt="image"></p></li></ul><h3 id="总结">总结</h3><p>目前 masterGo MCP 生成代码的原材料是设计文件的 DSL 简单处理过一层之后的 DSL Object，AI 并不能根据原始图层来进行精确的布局，也不能生产动态内容的布局(包括文字个数动态变化，以及其他元素动态个数)，一方面 MCP 提供的 DSL Object 是基于图层信息的，非常杂乱，一方面目前的 AI 处理大量数据是有缺陷的。</p><h3 id="实操参考：">实操参考：</h3><p><a href="https://mastergo.com/file/155675508499265?fileOpenFrom=home&amp;page_id=1%3A0">https://mastergo.com/file/155675508499265?fileOpenFrom=home&amp;page_id=1%3A0</a></p>]]></content>
    
    
    <categories>
      
      <category>MasterGo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MasterGo</tag>
      
      <tag>MCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECharts 线条精确交互演示 (PC/移动端)</title>
    <link href="/2025/03/15/ECharts%E7%BA%BF%E6%9D%A1%E7%B2%BE%E7%A1%AE%E4%BA%A4%E4%BA%92%E6%BC%94%E7%A4%BA/"/>
    <url>/2025/03/15/ECharts%E7%BA%BF%E6%9D%A1%E7%B2%BE%E7%A1%AE%E4%BA%A4%E4%BA%92%E6%BC%94%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>本文演示了如何在 ECharts 中实现精确的线条交互效果，解决了十字线经过数据点时意外触发线条高亮的问题，同时支持 PC 端和移动端的不同交互方式。</p><span id="more"></span><h2 id="🎯-演示效果">🎯 演示效果</h2><div class="demo-container">  <div class="demo-info">    <h3>📋 测试说明：</h3>    <ul>      <li><strong>蓝色线条</strong>：原始线条，宽度2px，正常显示</li>      <li><strong>红色线条</strong>：原始线条，宽度2px，正常显示</li>      <li><strong>透明辅助区域</strong>：宽度12px，完全透明，用于扩大交互检测</li>      <li><strong>PC端测试重点</strong>：只有鼠标接近线条时才高亮，移动十字线经过数据点不会高亮</li>      <li><strong>移动端测试重点</strong>：点击线条附近可高亮切换，支持取消和切换(F12切换手机模式，然后刷新)</li>    </ul>  </div>  <div class="demo-highlight">    💡 <strong>PC端测试</strong>：①鼠标hover线条附近→线条高亮 ②十字线经过→不高亮！<br />    📱 <strong>移动端测试</strong>：①点击线条附近→高亮切换 ②再次点击→取消高亮！  </div>  <div id="chart" class="chart-container"></div></div><h2 id="🔧-实现原理">🔧 实现原理</h2><h3 id="原理-1：禁用-axisPointer-触发系列强调效果">原理 1：禁用 axisPointer 触发系列强调效果</h3><p>全局禁用<code>axisPointer</code>触发系列强调效果，确保十字线经过数据点时不会触发线条高亮：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全局禁用axisPointer触发系列强调效果</span><br><span class="hljs-attr">axisPointer</span>: &#123;<br>  <span class="hljs-attr">triggerEmphasis</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关键：全局禁用axisPointer触发系列强调效果</span><br>&#125;<br><br><span class="hljs-comment">// 每个线条里的triggerEmphasis: false也需要设置</span><br><span class="hljs-attr">series</span>: [<br>  &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-attr">triggerEmphasis</span>: <span class="hljs-literal">false</span>,<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="原理-2：透明辅助线扩大交互区域">原理 2：透明辅助线扩大交互区域</h3><p>为每条线创建同名的透明辅助粗线（宽 12px），比原始线条宽 6 倍，用户看不见但能响应交互事件：</p><ul><li><strong>PC 端</strong>：hover 辅助线 → 高亮原始线，mouseout→ 恢复正常</li><li><strong>移动端</strong>：点击辅助线/原始线 → 切换高亮状态，支持取消和切换</li><li><strong>小技巧</strong>：辅助线置于底层（z: -1），用户看不见但能响应交互</li><li><strong>小技巧</strong>：通过 dispatchAction 高亮同名的原始线条</li></ul><h2 id="💻-完整代码实现">💻 完整代码实现</h2><style>.demo-container {  margin: 20px 0;}.demo-info {  background: #e3f2fd;  border-left: 4px solid #2196f3;  padding: 15px;  margin: 20px 0;  border-radius: 0 4px 4px 0;}.demo-info h3 {  margin: 0 0 10px 0;  color: #1976d2;}.demo-info ul {  margin: 0;  padding-left: 20px;}.demo-info li {  margin: 5px 0;  color: #555;}.demo-highlight {  background: #fff3cd;  border: 1px solid #ffeaa7;  padding: 10px;  border-radius: 4px;  margin: 10px 0;  text-align: center;  color: #856404;  font-weight: bold;}.chart-container {  width: 100%;  height: 500px;  margin: 20px 0;  border: 1px solid #e0e0e0;  border-radius: 4px;}@media (max-width: 768px) {  .chart-container {    height: 400px;  }}</style><script src="https://cdn.jsdelivr.net/npm/echarts@6.0.0/dist/echarts.min.js"></script><script>// 等待页面加载完成document.addEventListener('DOMContentLoaded', function() {  // 检查ECharts是否已加载  if (typeof echarts === 'undefined') {    console.error('ECharts未正确加载');    return;  }  // 初始化ECharts实例  const chartDom = document.getElementById('chart');  if (!chartDom) {    console.error('找不到chart容器元素');    return;  }  const myChart = echarts.init(chartDom);  // 生成示例数据  const generateData = (base, variance) => {    const data = [];    for (let i = 0; i < 50; i++) {      data.push([        i,        base + Math.sin(i * 0.2) * variance + Math.random() * 20 - 10,      ]);    }    return data;  };  const data1 = generateData(100, 30); // 蓝色线数据  const data2 = generateData(150, 40); // 红色线数据  const option = {    title: {      text: '线条精确交互测试 (PC端Hover / 移动端点击)',      left: 'center',      textStyle: {        fontSize: 16,      },    },    // 🎯 全局axisPointer配置 - 禁用自动强调    axisPointer: {      triggerEmphasis: false, // 关键：全局禁用axisPointer触发系列强调效果    },    tooltip: {      trigger: 'axis',      axisPointer: {        type: 'cross',        crossStyle: {          color: '#999',        },        triggerEmphasis: false, // 🎯 关键：禁用axisPointer触发系列强调效果      },    },    legend: {      data: ['趋势线A', '趋势线B'],      top: 40,    },    grid: {      left: '3%',      right: '4%',      bottom: '3%',      top: '15%',      containLabel: true,    },    xAxis: {      type: 'value',      name: '时间点',    },    yAxis: {      type: 'value',      name: '数值',    },    series: [      // === 原始线条A ===      {        name: '趋势线A',        type: 'line',        data: data1,        smooth: true,        lineStyle: {          width: 2,          color: '#1890ff',        },        itemStyle: {          color: '#1890ff',        },        emphasis: {          scale: false,          lineStyle: {            width: 4,            shadowColor: 'rgba(24, 144, 255, 0.8)',            shadowBlur: 8,            shadowOffsetY: 2,          },        },        showSymbol: false,        hoverAnimation: true,        triggerLineEvent: true,        triggerEmphasis: false, // 🎯 关键：禁用被axisPointer自动强调      },      // === 透明辅助线A ===      {        name: '趋势线A', // 🎯 关键：同名！        type: 'line',        data: data1, // 🎯 关键：同数据！        smooth: true,        lineStyle: {          width: 12, // 🚀 6倍宽度用于hover检测          color: 'transparent', // 👻 完全透明          opacity: 0,        },        itemStyle: {          color: 'transparent',          opacity: 0,        },        showInLegend: false, // 🚫 不显示在图例中        showSymbol: false,        hoverAnimation: false,        triggerLineEvent: true,        triggerEmphasis: false, // 🎯 关键：禁用被axisPointer自动强调        z: -1, // 🎯 底层，不遮挡其他元素      },      // === 原始线条B ===      {        name: '趋势线B',        type: 'line',        data: data2,        smooth: true,        lineStyle: {          width: 2,          color: '#ff4d4f',        },        itemStyle: {          color: '#ff4d4f',        },        emphasis: {          scale: false,          lineStyle: {            width: 4,            shadowColor: 'rgba(255, 77, 79, 0.8)',            shadowBlur: 8,            shadowOffsetY: 2,          },        },        showSymbol: false,        hoverAnimation: true,        triggerLineEvent: true,        triggerEmphasis: false, // 🎯 关键：禁用被axisPointer自动强调      },      // === 透明辅助线B ===      {        name: '趋势线B', // 🎯 关键：同名！        type: 'line',        data: data2, // 🎯 关键：同数据！        smooth: true,        lineStyle: {          width: 12, // 🚀 6倍宽度用于hover检测          color: 'transparent', // 👻 完全透明          opacity: 0,        },        itemStyle: {          color: 'transparent',          opacity: 0,        },        showInLegend: false, // 🚫 不显示在图例中        showSymbol: false,        hoverAnimation: false,        triggerLineEvent: true,        triggerEmphasis: false, // 🎯 关键：禁用被axisPointer自动强调        z: -1, // 🎯 底层，不遮挡其他元素      },    ],  };  // 设置图表配置  myChart.setOption(option);  // 🎯 检测是否为移动设备  const isMobile =    /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(      navigator.userAgent    ) || window.innerWidth <= 768;  let currentHighlighted = null; // 记录当前高亮的系列  // 🎯 关键事件处理：实现精确的hover联动  myChart.on('mouseover', function (params) {    if (isMobile) return; // 移动端跳过hover事件    console.log('🎯 Hover事件触发:', params.seriesName);    if (params.seriesName) {      // 高亮所有同名系列（原始线条会被高亮）      myChart.dispatchAction({        type: 'highlight',        seriesName: params.seriesName,      });      // 同时高亮图例      myChart.dispatchAction({        type: 'legendHighlight',        name: params.seriesName,      });      // 在页面上显示提示      showHoverInfo(params.seriesName, isMobile ? '点击高亮' : '高亮');    }  });  myChart.on('mouseout', function (params) {    if (isMobile) return; // 移动端跳过hover事件    console.log('🔄 Mouse离开:', params.seriesName);    if (params.seriesName) {      // 取消高亮      myChart.dispatchAction({        type: 'downplay',        seriesName: params.seriesName,      });      myChart.dispatchAction({        type: 'legendDownplay',        name: params.seriesName,      });      // 清除提示      showHoverInfo(params.seriesName, '恢复');    }  });  // 🎯 点击事件处理（PC端和移动端）  myChart.on('click', function (params) {    console.log('📱 点击事件触发:', params.seriesName, '移动端:', isMobile);    if (params.seriesName) {      // 点击到了线条      if (isMobile) {        // 移动端：点击切换高亮状态        if (currentHighlighted === params.seriesName) {          // 当前系列已高亮，取消高亮          myChart.dispatchAction({            type: 'downplay',            seriesName: params.seriesName,          });          myChart.dispatchAction({            type: 'legendDownplay',            name: params.seriesName,          });          currentHighlighted = null;          showMobileInfo(params.seriesName, '取消高亮');        } else {          // 先清除之前的高亮          if (currentHighlighted) {            myChart.dispatchAction({              type: 'downplay',              seriesName: currentHighlighted,            });            myChart.dispatchAction({              type: 'legendDownplay',              name: currentHighlighted,            });          }          // 高亮新的系列          myChart.dispatchAction({            type: 'highlight',            seriesName: params.seriesName,          });          myChart.dispatchAction({            type: 'legendHighlight',            name: params.seriesName,          });          currentHighlighted = params.seriesName;          showMobileInfo(params.seriesName, '点击高亮');        }      } else {        // PC端：点击选中图例        myChart.dispatchAction({          type: 'legendToggleSelect',          name: params.seriesName,        });        showHoverInfo(params.seriesName, '图例切换');      }    } else if (isMobile && currentHighlighted) {      // 移动端：点击空白区域，取消当前高亮      myChart.dispatchAction({        type: 'downplay',        seriesName: currentHighlighted,      });      myChart.dispatchAction({        type: 'legendDownplay',        name: currentHighlighted,      });      showMobileInfo(currentHighlighted, '取消高亮');      currentHighlighted = null;    }  });  // 显示hover状态信息（PC端）  function showHoverInfo(seriesName, action) {    const info = document.querySelector('.demo-highlight');    if (!info) return;        if (action === '高亮' || action === '点击高亮') {      info.innerHTML = `✨ <strong>${seriesName}</strong> 正在高亮显示！`;      info.style.background = '#d4edda';      info.style.borderColor = '#c3e6cb';      info.style.color = '#155724';    } else if (action === '图例切换') {      info.innerHTML = `🔄 <strong>${seriesName}</strong> 图例状态已切换！`;      info.style.background = '#e3f2fd';      info.style.borderColor = '#bbdefb';      info.style.color = '#1565c0';    } else {      info.innerHTML = isMobile        ? '📱 <strong>移动端</strong>：点击线条附近→高亮切换！再次点击→取消高亮！点击空白→取消'        : '💡 <strong>PC端</strong>：鼠标hover线条附近→高亮 / 十字线经过→不高亮！';      info.style.background = '#fff3cd';      info.style.borderColor = '#ffeaa7';      info.style.color = '#856404';    }  }  // 显示移动端状态信息  function showMobileInfo(seriesName, action) {    const info = document.querySelector('.demo-highlight');    if (!info) return;        if (action === '点击高亮') {      info.innerHTML = `📱 <strong>${seriesName}</strong> 已高亮！再次点击可取消`;      info.style.background = '#d4edda';      info.style.borderColor = '#c3e6cb';      info.style.color = '#155724';    } else if (action === '取消高亮') {      info.innerHTML = `📱 <strong>${seriesName}</strong> 高亮已取消！点击其他线条可高亮`;      info.style.background = '#f8d7da';      info.style.borderColor = '#f5c6cb';      info.style.color = '#721c24';    }  }  // 响应式处理  window.addEventListener('resize', function () {    if (myChart && !myChart.isDisposed()) {      myChart.resize();    }  });  // 添加说明文字  console.log('📊 Demo加载完成！');  console.log('🎯 测试要点：');  if (isMobile) {    console.log('📱 移动端模式：');    console.log('1. 点击线条附近 → 高亮切换');    console.log('2. 再次点击同一线条 → 取消高亮');    console.log('3. 点击其他线条 → 切换到新线条高亮');    console.log('4. 点击空白区域 → 取消当前高亮');  } else {    console.log('💻 PC端模式：');    console.log('1. 鼠标hover线条附近 → 线条高亮');    console.log('2. 十字线经过数据点 → 线条不高亮');    console.log('3. 鼠标离开 → 恢复正常');  }  console.log('5. 透明辅助线扩大了交互检测范围（12px）');  // 🎯 初始化提示信息  showHoverInfo('', '初始化');});</script><h2 id="📝-技术要点总结">📝 技术要点总结</h2><ol><li><strong>全局配置</strong>：通过 <code>axisPointer.triggerEmphasis: false</code> 禁用十字线触发高亮</li><li><strong>透明辅助线</strong>：创建同名透明线条，宽度 6 倍，用于扩大交互区域</li><li><strong>设备适配</strong>：自动检测移动设备，采用不同的交互方式</li><li><strong>状态管理</strong>：跟踪当前高亮状态，支持切换和取消</li><li><strong>响应式设计</strong>：图表自动适应容器大小变化</li></ol><p>这种方案完美解决了 ECharts 线条交互的精确性问题，无论在 PC 端还是移动端都能提供优秀的用户体验！</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECharts</tag>
      
      <tag>JavaScript</tag>
      
      <tag>数据可视化</tag>
      
      <tag>交互设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MasterGo DSL Transform 属性转换（Figma 也是如此）</title>
    <link href="/2024/11/03/masterGo_Transform/"/>
    <url>/2024/11/03/masterGo_Transform/</url>
    
    <content type="html"><![CDATA[<h3 id="DSL-中-relativeTransform-对象">DSL 中 relativeTransform 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVASCRIPT">[<br>  [<span class="hljs-number">0.7071067690849304</span>, <span class="hljs-number">0.7071067690849304</span>, <span class="hljs-number">64.82373046875</span>],<br>  [-<span class="hljs-number">0.7071067690849304</span>, <span class="hljs-number">0.7071067690849304</span>, <span class="hljs-number">46.4097900390625</span>]<br>]<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [</span><br><span class="hljs-comment"> *   [a, c, tx],</span><br><span class="hljs-comment"> *   [b, d, ty]</span><br><span class="hljs-comment"> * ]</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>这是一个典型的 2×3 仿射变换矩阵（Affine Transform），与 CSS 中的 transform 几乎一样。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* transform: matrix(a, b, c, d, tx, ty); */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">matrix</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><small>MasterGo 和 Figma 的 relativeTransform 与 CSS 中的 <code>transform: matrix()</code> 一样，Y 轴的正方向是向下；而 CSS 中的 <code>transform: rotate(45deg)</code> 的 Y 轴正方向是向上，两者不同。</small></p><table><thead><tr><th>含义</th><th>CSS <code>matrix(a,b,c,d,tx,ty)</code></th><th>Figma <code>relativeTransform</code></th></tr></thead><tbody><tr><td>第一行第一列</td><td>a</td><td>matrix[0][0]</td></tr><tr><td>第二行第一列</td><td>b</td><td>matrix[1][0]</td></tr><tr><td>第一行第二列</td><td>c</td><td>matrix[0][1]</td></tr><tr><td>第二行第二列</td><td>d</td><td>matrix[1][1]</td></tr><tr><td>第一行第三列</td><td>tx</td><td>matrix[0][2]</td></tr><tr><td>第二行第三列</td><td>ty</td><td>matrix[1][2]</td></tr></tbody></table><p>更清晰的对照：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// CSS → Figma</span><br>[<br>  [a, c, tx],<br>  [b, <span class="hljs-keyword">d</span>, <span class="hljs-keyword">ty</span>]<br>]<br><br><span class="hljs-comment">// Figma → CSS</span><br><span class="hljs-built_in">matrix</span>(a, b, c, <span class="hljs-keyword">d</span>, tx, <span class="hljs-keyword">ty</span>)<br><br></code></pre></td></tr></table></figure><h3 id="DSL-中-relativeTransform、CSS-中-matrix-和单一属性转换">DSL 中 relativeTransform、CSS 中 matrix 和单一属性转换</h3><ul><li>relativeTransform2SingleAttribute</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">relativeTransform2SingleAttribute</span>(<span class="hljs-params">matrix</span>) &#123;<br>  <span class="hljs-keyword">const</span> [[a, c, tx], [b, d, ty]] = matrix;<br><br>  <span class="hljs-keyword">const</span> translation = &#123; <span class="hljs-attr">x</span>: tx, <span class="hljs-attr">y</span>: ty &#125;;<br><br>  <span class="hljs-keyword">const</span> scaleX = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(a * a + b * b);<br>  <span class="hljs-keyword">const</span> scaleY = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(c * c + d * d);<br><br>  <span class="hljs-comment">// CSS 设置单一属性时，rotate 的 Y 轴正向相反</span><br>  <span class="hljs-keyword">const</span> rotation = -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">atan2</span>(b / scaleX, a / scaleX) * (<span class="hljs-number">180</span> / <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br><br>  <span class="hljs-comment">// 修正浮点误差</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fix</span> = (<span class="hljs-params">n</span>) =&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(n - <span class="hljs-number">1</span>) &lt; <span class="hljs-number">1e-6</span> ? <span class="hljs-number">1</span> : n;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    rotation,<br>    <span class="hljs-attr">scale</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-title function_">fix</span>(scaleX), <span class="hljs-attr">y</span>: <span class="hljs-title function_">fix</span>(scaleY) &#125;,<br>    translation,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在 MasterGo 中，目前存在这样的问题：变换后，DSL 导出的宽高仍是原始元素的宽高，并非外接矩形的宽高；但下载出来的元素却是外接矩形的图片，因此需要手动计算外接矩形宽高。</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-comment">// 传入 MasterGo DSL 的矩阵</span><br><span class="hljs-comment">// 输出结果仍然要向上取整，因为下载的图片宽高没有小数点，均向上取整。</span><br><span class="hljs-keyword">function</span> getBoundingBoxAfterTransform(matrix, width, height) &#123;<br>  const [[a, c, tx], [b, d, ty]] = matrix;<br><br>  <span class="hljs-comment">// 原始矩形的四个顶点</span><br>  const points = [<br>    &#123; <span class="hljs-variable language_">x</span>: <span class="hljs-number">0</span>, <span class="hljs-variable language_">y</span>: <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-variable language_">x</span>: width, <span class="hljs-variable language_">y</span>: <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-variable language_">x</span>: <span class="hljs-number">0</span>, <span class="hljs-variable language_">y</span>: height &#125;,<br>    &#123; <span class="hljs-variable language_">x</span>: width, <span class="hljs-variable language_">y</span>: height &#125;,<br>  ];<br><br>  <span class="hljs-comment">// 经过变换后的点</span><br>  const transformed = points.map(p =&gt; (&#123;<br>    <span class="hljs-variable language_">x</span>: a * p.<span class="hljs-variable language_">x</span> + c * p.<span class="hljs-variable language_">y</span> + tx,<br>    <span class="hljs-variable language_">y</span>: b * p.<span class="hljs-variable language_">x</span> + d * p.<span class="hljs-variable language_">y</span> + ty<br>  &#125;));<br><br>  <span class="hljs-comment">// 求 min / max</span><br>  const xs = transformed.map(p =&gt; p.<span class="hljs-variable language_">x</span>);<br>  const ys = transformed.map(p =&gt; p.<span class="hljs-variable language_">y</span>);<br><br>  const minX = Math.<span class="hljs-built_in">min</span>(...xs);<br>  const maxX = Math.<span class="hljs-built_in">max</span>(...xs);<br>  const minY = Math.<span class="hljs-built_in">min</span>(...ys);<br>  const maxY = Math.<span class="hljs-built_in">max</span>(...ys);<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    width: maxX - minX,<br>    height: maxY - minY,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>把 rotation + scale + translation 重新组合成 MasterGo 的 relativeTransform</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">composeRelativeTransform</span>(<span class="hljs-params">&#123; rotation, scale, translation &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> rad = -rotation * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span>; <span class="hljs-comment">// 取反，因为 CSS 单独设置 rotate 时的 Y 轴方向与此相反。</span><br><br>  <span class="hljs-keyword">const</span> a = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(rad) * scale.<span class="hljs-property">x</span>;<br>  <span class="hljs-keyword">const</span> b = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(rad) * scale.<span class="hljs-property">x</span>;<br>  <span class="hljs-keyword">const</span> c = -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(rad) * scale.<span class="hljs-property">y</span>;<br>  <span class="hljs-keyword">const</span> d = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(rad) * scale.<span class="hljs-property">y</span>;<br><br>  <span class="hljs-keyword">const</span> tx = translation.<span class="hljs-property">x</span>;<br>  <span class="hljs-keyword">const</span> ty = translation.<span class="hljs-property">y</span>;<br><br>  <span class="hljs-keyword">return</span> [<br>    [a, c, tx],<br>    [b, d, ty],<br>  ];<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MasterGo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MasterGo</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 基础配置</title>
    <link href="/2024/10/05/nginx%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/10/05/nginx%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="🌐-nginx-配置">🌐 nginx 配置</h2><h3 id="📁-静态资源文件配置-适用-SPA-项目">📁 静态资源文件配置(适用 SPA 项目)</h3><p>使用 location 进行 url 映射本机资源，^~是前缀匹配，并且命中了，就不会去后面继续匹配规则了。由于我们可能有很多的静态资源项目，所以只在当前的 location 里，把匹配到 url 的部分路径替换/www/wwwroot/chat/chat_web/。比如访问<code>https://qunyangbang.cn/chat_web/new-chat</code>，在 nginx 这层就会变成访问<code>/www/wwwroot/chat/chat_web/new-chat</code>。<code>autoindex</code> 是当路径访问的资源没有时，会尝试某个路径下的 <code>index.html</code>。<code>try_files</code> 是按照制定顺序查看文件，<code>try_files $uri $uri/ /chat_web/index.html;</code>这里就是先是原路径($uri)，再尝试路径下的 index.html($uri/,因为开启了 autoindex,就是给这里用的)，最后尝试访问绝对路径(/chat_web/index.html，访问这个路径，nginx 会把他仿作新的内部请求，重新进行 location 匹配，然后就能找到资源了)。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">server &#123;<br>  <span class="hljs-string">...</span><br>  <span class="hljs-string">...</span><br>  <span class="hljs-string">...</span><br><br>  location ^~<span class="hljs-string">/chat_web/</span> &#123;<br>    <span class="hljs-keyword">alias</span> <span class="hljs-string">/www/wwwroot/chat/chat_web/</span>;<br>    autoindex on;<br>    <span class="hljs-keyword">try</span>_files $uri $uri/ <span class="hljs-string">/chat_web/index.html</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⚡-静态资源性能优化">⚡ 静态资源性能优化</h3><ol><li><p>🗜️ 开启 Gzip，压缩资源文件，提高传输效率</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">http&#123;<br>    gzip <span class="hljs-literal">on</span>; <span class="hljs-comment"># 开始gzip</span><br>    gzip_min_length  <span class="hljs-number">1</span>k; <span class="hljs-comment"># 只有当文件大小 ≥ 1KB 时才进行gzip压缩</span><br>    gzip_buffers     <span class="hljs-number">4</span> <span class="hljs-number">16</span>k; <span class="hljs-comment"># 设置gzip压缩的缓冲区，使用 4 个 16KB 的缓冲区来存储压缩数据</span><br>    gzip_http_version <span class="hljs-number">1.1</span>; <span class="hljs-comment"># 指定启用gzip压缩的HTTP协议版本，HTTP/2：也会进行gzip压缩</span><br>    gzip_comp_level <span class="hljs-number">2</span>; <span class="hljs-comment"># 设置gzip压缩级别，1-9（1最快但压缩率最低，9最慢但压缩率最高）</span><br>    gzip_types     <span class="hljs-comment"># text/plain application/javascript application/x-javascript text/javascript text/css application/xml; # 指定需要压缩的MIME类型</span><br>    gzip_vary <span class="hljs-literal">on</span>; <span class="hljs-comment"># 添加Vary: Accept-Encoding响应头，告诉缓存服务器根据客户端是否支持压缩来缓存不同版本</span><br>    gzip_proxied   expired <span class="hljs-literal">no</span>-cache <span class="hljs-literal">no</span>-store private auth; <span class="hljs-comment"># 在什么情况下对代理请求进行压缩(响应头包含过期时间的请求、响应头包含Cache-Control: no-cache的请求，等)</span><br>    gzip_disable   <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>; <span class="hljs-comment"># 禁用特定浏览器的gzip压缩，对IE 1-6版本的浏览器禁用gzip</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>💾 图片/CSS/JS 缓存</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><br>   <span class="hljs-comment"># JS/CSS 文件的专门 location</span><br>     <span class="hljs-section">location</span> ~_<span class="hljs-regexp"> ^/chat_web/._\.(js|css)$</span> &#123;<br>     <span class="hljs-attribute">alias</span> /www/wwwroot/chat/chat_web/;<br>     <span class="hljs-attribute">expires</span> <span class="hljs-number">1y</span>;<br>     <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">&quot;public, max-age=31536000, immutable&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-comment"># 图片文件的专门 location</span><br>   <span class="hljs-section">location</span> ~_<span class="hljs-regexp"> ^/chat_web/._\.(jpg|jpeg|png|gif|ico|svg)$</span> &#123;<br>     <span class="hljs-attribute">alias</span> /www/wwwroot/chat/chat_web/;<br>     <span class="hljs-attribute">expires</span> <span class="hljs-number">3M</span>;<br>     <span class="hljs-attribute">add_header</span> Cache-Control <span class="hljs-string">&quot;public, max-age=7776000&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-comment"># 路由专用 location</span><br>   <span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /chat_web/ &#123;<br>     <span class="hljs-attribute">alias</span> /www/wwwroot/chat/chat_web/;<br>     <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br>     <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /chat_web/index.html;<br>   &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="🔗-后端接口服务">🔗 后端接口服务</h3><p>直接使用 proxy_pass 代理到本机的某个端口就行了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># chat项目的后端</span><br><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /chat_server/ &#123;<br>  <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:4001/;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="🔒-SSL-证书配置">🔒 SSL 证书配置</h3><blockquote><p>SSL 证书还是挺贵的，可以使用 Let’s Encrypt 的证书证书，参考链接：<a href="https://diamondfsd.com/lets-encrytp-hand-https/#google_vignette">https://diamondfsd.com/lets-encrytp-hand-https/#google_vignette</a></p></blockquote><p>这里使用的是 307,因为 307 的转发可以保留所有的参数，比如 method 为 POST，301 会变成 GET 请求，307 会继续保持 POST。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs awk">http &#123;<br><br>    ...<br>    ...<br><br>    server &#123;<br>      listen <span class="hljs-number">80</span>;<br>      server_name qunyangbang.cn www.qunyangbang.cn m.qunyangbang.cn;<br>      root <span class="hljs-regexp">/www/</span>wwwroot;<br>      <span class="hljs-comment"># 重定向所有 HTTP 请求到 HTTPS</span><br>        return <span class="hljs-number">307</span> https:<span class="hljs-regexp">//</span><span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;<br>    &#125;<br><br>    server &#123;<br>        <span class="hljs-comment">#SSL 默认访问端口号为 443</span><br>        listen <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-comment">#请填写绑定证书的域名,这个证书是单域名的</span><br>        server_name qunyangbang.cn www.qunyangbang.cn;<br>        <span class="hljs-comment">#请填写证书文件的相对路径或绝对路径</span><br>        ssl_certificate <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost<span class="hljs-regexp">/cert/</span>qunyangbang.cn_bundle.crt;<br>        <span class="hljs-comment">#请填写私钥文件的相对路径或绝对路径</span><br>        ssl_certificate_key <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost<span class="hljs-regexp">/cert/</span>qunyangbang.cn.key;<br>        ssl_session_timeout <span class="hljs-number">5</span>m;<br>        <span class="hljs-comment">#请按照以下协议配置</span><br>        ssl_protocols TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>        <span class="hljs-comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        location / &#123;<br>            return <span class="hljs-number">301</span> https:<span class="hljs-regexp">//</span>www.qunyangbang.cn;<br>            root <span class="hljs-regexp">/www/</span>wwwroot;<br>            index  index.html index.htm;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JWT登录系统</title>
    <link href="/2024/06/06/JWT%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/06/06/JWT%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="🌐-JWT-登录系统">🌐 JWT 登录系统</h2><h3 id="📁-登录认证主要三个方式">📁 登录认证主要三个方式</h3><ol><li>Cookie-Session 方式：用户凭借用户名和密码登录，服务端生成一个 session 来记录用户状态，并存在数据库，然后生成一个 session id，服务器将这个 session id 通过 cookie 返回给浏览器，浏览器后续请求都带上 cookie，服务端提取 cookie 里的 session id，根据 session id 去数据库获取用户信息。</li><li><a href="https://www.rfcreader.com/#rfc7519">JWT 认证</a>：用户登录后，服务端生成 JWT(Json Web Token)，里面包含用户的信息，返回给客户端，客户端妥善保存，每次请求的时候带上 JWT，服务器读取 JWT 进行解码直接获取用户信息。</li><li><a href="https://www.rfcreader.com/#rfc6749">OAuth 认证</a>： 主要用户第三方应用认证，比如现在各个网站都提供的微信连登，就是典型的 ​​OAuth 2.0 授权协议 ​​。</li></ol><h3 id="优缺点比较">优缺点比较</h3><table><thead><tr><th>项目</th><th>Cookie-Session</th><th>JWT</th><th>OAuth 2.0</th></tr></thead><tbody><tr><td>主要用途</td><td>认证</td><td>认证</td><td>第三方平台授权（如微信/Google 登录）</td></tr><tr><td>状态管理 ​​</td><td>​​ 有状态 ​​。服务器端需要存储 Session。</td><td>​​ 无状态 ​​。所有状态都存储在令牌本身。</td><td>​​ 框架/协议 ​​，定义授权流程。其颁发的令牌可以是 JWT 格式。）</td></tr><tr><td>通信方式</td><td><code>Set-Cookie</code> + <code>Cookie</code></td><td><code>Authorization: Bearer &lt;jwt&gt;</code></td><td><code>Authorization Code</code> / <code>Bearer Token</code></td></tr><tr><td>存储位置</td><td>客户端 ​​：Cookie。服务端 ​​：Session（内存、数据库、Redis）。</td><td>​​ 客户端 ​​。Token 通常存储在 localStorage 或内存中。</td><td>客户端 ​​。获取到的 Access Token 由客户端存储。</td></tr><tr><td>扩展性</td><td>较差 ​​。在分布式环境下需要做 Session 共享/粘滞。</td><td>​​ 极佳 ​​。天然支持分布式，任何服务节点只需密钥即可验证令牌。</td><td>极佳 ​​。为分布式和第三方应用授权设计。</td></tr><tr><td>安全性</td><td>易受 ​​CSRF​​ 攻击，需额外防护。Session ID 泄露有风险。</td><td>Token 泄露即拥有权限，需妥善存储。有效期管理是关键。</td><td>流程复杂，实现不当易引入漏洞。Refresh Token 机制提升了安全性</td></tr><tr><td>RFC 依据</td><td>RFC 6265</td><td>RFC 7519</td><td>RFC 6749 / 6750</td></tr></tbody></table><p>现在企业一般都使用 JWT，因为兼容多端，减轻服务器压力。比如最近大火的 Open AI 的 API 就是使用 JWT，他的传送方式是<code>Authorization: Bearer &lt;token&gt;</code>，它的 token 是以 sk-开头的 token，是由 JWT 又做了一层安全编码。</p><h3 id="JWT-详解">JWT 详解</h3><p>JWT 是由三个 Base64Url 编码部分组成的字符串，以点号分隔：<br><code>Header.Payload.Signature</code><br>示例：<br><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6IjEzNTgzMTA2NzcxQDE2My5jb20iLCJuYW1lIjp7ImZpcnN0TmFtZSI6IuWImCIsImxhc3ROYW1lIjoi5b-X5rSLIn0sInV1aWQiOiJiMWZlZTI5Ny0yMGEwLTQ4MzEtODhlYy0wY2FkM2M2ODYyN2UiLCJpZCI6IjY1NDBiOGY0ZDQ4OGNmZGQ5NWZhNGJkOSIsImlhdCI6MTcwMDQ1MDM3MywiZXhwIjoxNzAwNDUzOTczfQ.nUwSUzSEFUmaCuc9o2BsGbs6ldgFCplIM8RMUf0u1ys</code>。</p><p>Header 和 Payload 都是 base64 后的结果，Signature 是 Header + Payload 的签名。签名的目的是为了防止 token 被篡改，签名的算法是 Header 里的 alg 字段指定的算法，一般是 HMAC SHA256 或者 RSA，这里用的是 HMAC SHA256，签名的时候需要一个密钥，这个密钥只有服务端知道。 服务端接收的 JWT，然后根据密匙和 Header 和 Payload 数据生成签名，如果一致就说明数据没有被修改。</p><p>Header 示例：</p><pre><code class="hljs"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></code></pre><p>Payload 示例：</p><pre><code class="hljs"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1516239022</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></code></pre><p>Signature 示例：<code>6a5f6ac179d9ba9ccb2f1291f6285bba2913a842b2d212abcc5a8c0bfccb</code>任意字符串。</p><p>JWT 字符串的 Header 和 Payload 部分就是简单的 base64 编码，直接 base64 解码，就能获取原始信息。所以 JWT 还要做一层防护性的编码，并且生成 JWT 之前 Payload 部分也做一层防护性编码.</p><h3 id="登录设计">登录设计</h3><p>一般使用双令牌认证，因为安全性比较高。一个叫访问令牌(Access Token)，一个叫刷新令牌(Refresh Token)。Access Token 过期后，可使用 Refresh Token 静默获取新 Token，无需频繁登录。</p><p>主要流程：登录 → 获取 Access Token 和 Refresh Token → 请求 API（Access Token 过期 → 用 Refresh Token 刷新 → 获取新 Access Token；如果 Refresh Token 过期就重新登录）。一般 Refresh Token 有效期是 30 天，也可以更久，但是不建议永久，Access Token 有效期一般几小时，高安全性要求的应用（如银行、支付系统）​，一般 5 分钟。<br><img src="/img2/jwt_1.png" alt="image"></p><h3 id="JWT-研究资料">JWT 研究资料</h3><ul><li><a href="https://jwt.io/">jwt 在线编解码网站</a></li><li><a href="https://jwt.io/introduction">jwt 介绍</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mongodb在腾讯云部署和使用</title>
    <link href="/2024/05/14/mongodb%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/05/14/mongodb%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><ol><li>openCloudOS 9, 安装时选择 redHat,选择后会自动显示<code>redHat/centos x64</code></li><li>解压后，bin 文件夹下之前有<code>mongo.conf</code>，<code>mongodb 8.09</code>版本没有，可以自己在 bin 文件夹下创建<code>mongo.conf</code>,启动时<code>./mongod --config mongodb.conf</code></li><li><code>/www/server/mongodb/bin/mongod: error while loading shared libraries: libcrypto.so.1.1: cannot open shared object file: No such file or directory</code><ol><li>sudo dnf install -y compat-openssl11</li><li>find / -name &quot;libcrypto.so.1.1&quot; 2&gt;/dev/null<ol><li>若输出类似 /usr/lib64/libcrypto.so.1.1，则成功</li></ol></li></ol></li></ol><h2 id="启动-mongodb">启动 mongodb</h2><ol><li><p>安装好 mongodb</p></li><li><p>创建 db 目录和 log 目录，log 目录里面有 mongo.log，是 logpath</p></li><li><p>使用<code>mongo.conf</code>文件进行配置参数</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># 设置数据文件的存放目录</span><br><span class="hljs-params">storage:</span><br>  <span class="hljs-params">dbPath:</span> <span class="hljs-symbol">../data</span><br><br><span class="hljs-comment"># 设置日志文件的存放目录及其日志文件名</span><br><span class="hljs-params">systemLog:</span><br>  <span class="hljs-params">destination:</span> file<br>  <span class="hljs-params">path:</span> <span class="hljs-symbol">../logs/mongodb.log</span><br>  <span class="hljs-params">logRotate:</span> reopen<br>  <span class="hljs-params">logAppend:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-params">verbosity:</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 设置端口号（默认的端口号是 27017）</span><br><span class="hljs-params">net:</span><br>  <span class="hljs-params">port:</span> <span class="hljs-number">27099</span><br>  <span class="hljs-params">bindIp:</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><br><span class="hljs-comment"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class="hljs-comment"># fork: true</span><br><br><span class="hljs-comment"># 防止通过HTTP进行访问，3版本以后就没有这个参数了</span><br><span class="hljs-comment"># nohttpinterface: true</span><br><br><span class="hljs-comment"># 启用身份验证,在未创建校验用户之前，需要关闭</span><br><span class="hljs-params">security:</span><br>  <span class="hljs-params">authorization:</span> enabled<br><br><span class="hljs-params">setParameter:</span><br>  <span class="hljs-params">enableLocalhostAuthBypass:</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">#设置为以守护进程的方式运行</span><br><span class="hljs-params">processManagement:</span><br>  <span class="hljs-params">fork:</span> <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure></li><li><p>创建身份账户</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span>(&#x27;<span class="hljs-title">admin</span>&#x27;);<br><br>db.<span class="hljs-title function_ invoke__">createUser</span>(&#123;<br>  <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>  <span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>  <span class="hljs-attr">roles</span>: [<br>    &#123; <span class="hljs-attr">role</span>: <span class="hljs-string">&quot;userAdminAnyDatabase&quot;</span>, <span class="hljs-attr">db</span>: <span class="hljs-string">&quot;admin&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">role</span>: <span class="hljs-string">&quot;readWriteAnyDatabase&quot;</span>, <span class="hljs-attr">db</span>: <span class="hljs-string">&quot;admin&quot;</span> &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>启动 mongodb: <code>cd /www/server/mongodb/bin &amp;&amp; ./mongod --config mongodb.conf</code></p></li><li><p>查看后台进程和关闭：</p><ul><li>ps aux | grep mongod 和 kill pid</li><li>sudo systemctl stop mongod(使用 systemctl（仅限于使用 systemd 的 Linux 发行版)</li><li>sudo service mongod stop(使用 service 命令（仅限于使用 init 的 Linux 发行版)<br>sudo service /www/server/mongodb/bin/mongod stop</li></ul></li></ol><h2 id="mongoDB-安全">mongoDB 安全</h2><p>MongoDB 在您的服务器上可能存在安全风险的原因可能有以下几点：</p><p>默认配置：MongoDB 在默认情况下可能以不安全的方式进行配置。例如，默认情况下，MongoDB 允许匿名访问数据库，没有启用身份验证，或者使用弱密码进行访问。这可能使得攻击者可以轻易地访问和篡改您的数据库。</p><p>不安全的网络连接：如果您的 MongoDB 实例通过不安全的网络连接（如未加密的网络传输）进行通信，那么在传输过程中数据可能会被窃听或篡改。建议使用 TLS/SSL 等安全协议对 MongoDB 的网络连接进行加密，以保护数据的机密性和完整性。</p><p>缺乏访问控制：MongoDB 中的访问控制是非常重要的，它可以限制哪些用户或 IP 地址可以访问数据库，并定义不同用户的权限级别。如果没有正确配置访问控制，可能会导致未经授权的用户能够访问和修改数据库。</p><p>更新和补丁管理：未及时安装 MongoDB 的更新和补丁可能导致已知的安全漏洞存在于系统中，使得攻击者可以利用这些漏洞进行入侵。</p><p>弱密码：使用弱密码是一种常见的安全风险。如果您的 MongoDB 实例使用弱密码（如短密码、常见密码或容易猜测的密码），那么攻击者可以通过密码猜测或暴力破解的方式入侵数据库。</p><p>为了提高 MongoDB 的安全性，建议采取以下措施：</p><p>使用强密码：确保为 MongoDB 设置强密码，包括足够的长度、复杂性和随机性，以抵御密码猜测和暴力破解攻击。<br>启用身份验证：在 MongoDB 中启用身份验证，要求用户提供有效的凭据才能访问数据库。<br>配置访问控制：限制数据库的访问权限，只允许授权的用户和 IP 地址访问，并根据需要定义适当的权限级别。<br>加密网络连接：使用 TLS/SSL 等安全协议对 MongoDB 的网络连接进行加密，以防止数据被窃听或篡改。<br>及时更新和补丁：定期检查 MongoDB 的更新和补丁，并及时安装以修复已知的安全漏洞。<br>监控和日志记录：设置适当的监控和日志记录机制，及时检测潜在的安全事件或异常活动。<br>通过采取这些安全措施，您可以增强 MongoDB 在您的服务器上的安全性，并降低潜在的安全风险。同时，定期审查和评估安全性，并遵循最佳实践，是保持 MongoDB 环境安全的重要一环。</p><h2 id="参考">参考</h2><blockquote><p>mac: <a href="https://juejin.cn/post/7052585815037673479">https://juejin.cn/post/7052585815037673479</a></p></blockquote><blockquote><p>centos: <a href="https://juejin.cn/post/7163071747414032391">https://juejin.cn/post/7163071747414032391</a></p></blockquote><blockquote><p>远程连接+身份认证：<a href="https://blog.csdn.net/jianleking/article/details/79715097">https://blog.csdn.net/jianleking/article/details/79715097</a></p></blockquote><blockquote><p>内置角色：<a href="https://www.mongodb.com/docs/manual/reference/built-in-roles/">https://www.mongodb.com/docs/manual/reference/built-in-roles/</a></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>阅读源码步骤</title>
    <link href="/2024/03/11/%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E6%B8%90%E8%BF%9B%E6%AD%A5%E9%AA%A4/"/>
    <url>/2024/03/11/%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E6%B8%90%E8%BF%9B%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="阅读源码步骤：">阅读源码步骤：</h3><ol><li>阅读官网，<blockquote><p>原因：官网会交代这个库是解决什么问题的,引入什么概念。阅读一些 api，也有助于拼凑这个库的印象。</p></blockquote></li><li>api 都使用一遍<blockquote><p>原因：api 就是暴露出来的功能，源码是实现这些功能的过程，使用 api，然后基于自己的知识猜想实现过程，有助于对源码细节的理解，猜错也没关系。</p></blockquote></li><li>阅读开发工作组的讨论贴<blockquote><p>原因：讨论帖中常常会贴出一些问题，然后指出解决方案，充分的阅读，有助于知道源码为什么这么实现。看源码的时候就能减少很多疑问和卡点。</p></blockquote></li><li>从入口 debug 源码：<ul><li>技巧：<ol><li>主要找到几个关键节点，和执行结尾，对变量的记忆，不理解也没关系</li><li>对没见过的 api 或算法扫盲，增加熟悉程度。</li></ol></li></ul></li><li>直接阅读源码：<ul><li>技巧：<ol><li>变量命名要搞懂，库的命名一般都很精确，弄懂命名的字面意思有助于理解意图。</li><li>阅读注释，有助于理解亿图。</li><li>不理解的变量可以通过 vs code 的 Find All References 来找到使用位置，看看每个使用位置的上下文，有助于理解。</li><li>多读 5. 通过使用 api 方式再次 debug，加深理解。</li></ol></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>React Schedule</title>
    <link href="/2023/11/20/React-Schedule/"/>
    <url>/2023/11/20/React-Schedule/</url>
    
    <content type="html"><![CDATA[<h3 id="入口-unstable-scheduleCallback-调度-callback">入口 unstable_scheduleCallback 调度 callback</h3><ol><li><p>开始时间(startTime = 当前时间 + 传入的 delay) + 优先级时间，计算失效时间(expirationTime)</p></li><li><p>创建 newTask(来自 unstable_scheduleCallback)</p><ul><li>id:</li><li>callback // 传进来的 callback</li><li>priorityLevel // 传进来的优先级 priorityLevel</li><li>startTime // 上面计算的时间</li><li>expirationTime // 上面计算的失效时间</li><li>sortIndex: -1 // ??? 都是被复制为 expirationTime</li></ul></li><li><p>如果是<code>定时任务(当前时间后的一定时间才执行，现在还没有进入调度的资格，放在timerQueue中)</code>，也就是未来时间执行的任务(startTime &gt; currentTime)</p><ul><li>将 startTime 赋值给 sortIndex(newTask.sortIndex = startTime)</li><li>将 newTask 加入<code>定时任务队列中(timerQueue)</code></li><li>如果只有<code>定时任务(timeQueue)</code>,等待延迟执行时间后，触发<code>处理超时函数(handleTimeout)</code>,</li><li><code>处理超时函数(handleTimeout)</code>：<ul><li><code>提取定时队列中到时间的的任务到任务队列taskQueue(advanceTimers)</code>：主要是从定时任务队列(timeQueue)将到时间的任务放到任务队列中(taskQueue)；没有 callback 的释放掉；没有到执行时间的任务，再等等；</li><li>由于定时任务已经到执行时间，就放到任务队列，然后查看是否有任务执行，没有任务就执行该任务(唯一执行机制：用<code>isHostCallbackScheduled</code>标识来标识之前是否有<code>下一次事件循环结束立即执行任务</code>)，有就释放掉。</li><li><code>请求主持回调任务(requestHostCallback)</code>：启动一个<code>调度 执行等到最后期限任务(schedulePerformWorkUntilDeadline)</code>来执行<code>刷新工作(flushWork)</code>，并且用<code>isMessageLoopRunning</code>来锁定只有一次任务在下一轮事件循环后立即执行。<code>刷新工作(flushWork)</code>是挂在<code>全局变量scheduledHostCallback</code>上，之后在<code>等到最后期限时执行任务(performWorkUntilDeadline)</code>调用，之所以放在<code>全局变量scheduledHostCallback</code>上，是为了方便扩展，执行其他函数。</li><li><code>isHostCallbackScheduled</code>和<code>isMessageLoopRunning</code>作用一样， 保证一次 event loop 后只有一个任务执行,并且是串行的(保证了所有的事件占用时间是确定的，空闲也是确定的)，双重保险。</li></ul></li></ul></li><li><p>不是定时任务，将该任务放入<code>任务队列(taskQueue)</code>中后，<code>请求主持回调任务(requestHostCallback)</code>，最终会统一在<code>等到最后期限时执行任务(performWorkUntilDeadline)</code>中执行。</p></li><li><p><code>等到最后期限时执行任务(performWorkUntilDeadline)</code></p><ul><li>内部调用<code>全局变量scheduledHostCallback</code>即是<code>flushWork(true,currentTime)</code>, 并且在函数开始时，记录下当前时间为<code>开始时间(startTime)</code>,方便后面判断是否在一帧之内还有时间，作为是否还继续执行任务的依据。</li><li>得到<code>flushWork</code>返回的结果<code>是否有更多的工作(hasMoreWork)</code>，如果有更多的工作，有可能是优先级任务带来的延迟时间导致任务没有到过期时间(???)，也有可能是执行的任务不是 taskQueue 的第一个导致没删除也没处理就自动从新开始，就继续<code>调度最后期限任务(schedulePerformWorkUntilDeadline)</code>的<code>刷新任务(flushWork)</code>，</li></ul></li><li><p><code>刷新工作(flushWork)</code></p><ul><li>测试环境时 enableProfiling 为 true，会加 try{}catch 包裹<code>wookLoop</code>,把报错显示在屏幕,生产环境时,直接执行<code>wookLoop</code></li><li><code>工作循环(wookLoop)</code>:<ul><li><code>提取定时队列中到时间的的任务到任务队列taskQueue(advanceTimers)</code></li><li>拿出最早的任务，如果任务存在，并且不是调度 debug 模式，那么就是正常流程<ul><li>判断是否中断执行：<code>过期时间(expirationgTime)</code> 大于 <code>当前时间(currentTime)</code> ,或者<code>刷新工作</code>的开始时间到现在时间 大于 一帧时间，就中断。(hasTimeRemaining 这个字段暂时没用)。这里才用到优先级产生的过期时间，如果没有到期，就不执行任务，直到返回 true 给父级函数，然后继续<code>调度最后期限任务(schedulePerformWorkUntilDeadline)</code></li><li>没有中断执行的话，就检查 task.callback 是否是个函数，如果不是直接释放掉 task；</li><li>如果 task.callback 是函数，将 task.callback 的地址复制给当前局部变量 callback，然后将 task.callback 置为 null,将<code>任务的优先级(task.priorityLevel)</code>设置为<code>当前优先级(currentPriorityLevel)</code>,然后执行 callback,并传入参数过期标识(就是 true)<ul><li>如果<code>callback(true)</code>返回为一个函数，将该函数赋值给<code>task.callback</code>，将再次进入循环，执行 callback 任务,再次进入循环的方法就是不从 taskQueue 中去掉。</li><li>如果<code>callback(true)</code>返回不是一个函数，将剔除当前任务，也就是剔除任务队列中的第一个任务，这样就没办法循环自身了。因为当前的任务总是任务队列最优先执行的，所以就是当前执行掉的。所以就是任务队列的第一个。</li><li>然后做一遍<code>提取定时队列中到时间的的任务到任务队列taskQueue(advanceTimers)</code>，之后取优先级最高的任务，也就是第一个任务来继续循环。</li></ul></li></ul></li><li>以防<code>当前的任务(currentTask)</code>不是 <code>任务队列(taskQueue)</code>中的第一个，那么就有可能没从<code>任务队列(taskQueue)</code>中删除掉，再次检查 currentTask 是否是 null，如果是，就返回 true 给<code>执行过期的任务(performWorkUntilDeadline)</code>,它会产生一个<code>调度过期任务(schedulePerformWorkUntilDeadline)</code>；同时如果任务没有到过期时间，是不会执行的，此时 currentTask 还是第一个任务，就返回 true 给<code>执行到过期的任务(performWorkUntilDeadline)</code>，它会产生一个<code>调度过期任务(schedulePerformWorkUntilDeadline)</code></li><li>如果为空，那么只剩定时任务，就重复定时，然后触发<code>处理超时函数(handleTimeout)</code></li></ul></li></ul></li></ol><h2 id="路程上的疑惑，看完后解答">路程上的疑惑，看完后解答</h2><ol><li><code>定时任务</code>,<code>优先级产生的时间间隔造成的过期时间</code>，一开始是等待的<code>定时时间</code>，等到判断否是执行的时候用的是<code>过期时间</code>来检查是否大于当前时间，如果还没到，那么就返回有任务</li><li>取消前一个<code>定时任务</code>，会在 workLoop 里面执行<code>提取到时间的定时任务到任务队列(advanceTimers)</code>,和执行完任务队列后也会拿<code>定时任务队列</code>再次设置<code>定时器(requestHostTimeout)</code>来再次执行<code>超时处理函数</code>来检查到期任务。</li></ol><h2 id="属性">属性</h2><ol><li>优先级对应的时间延迟<ul><li>ImmediatePriority： -1 // 也就是立即执行</li><li>UserBlockingPriority： 250 // 用户锁定，也就是用户一直操作的间隔</li><li>IdlePriority：maxSigned31BitInt，也就是 1073741823，也就是 2^30 - 1 // 空闲</li><li>LowPriority：10000 // 低优先级</li><li>NormalPriority：5000 // 正常优先级</li></ul></li><li>taskQueue 是同步任务队列</li><li>timerQueue 定时任务，还没有执行，所以也不在调度之中，等到执行时间后才进入调度循环。</li><li>scheduledHostCallback<ul><li>requestHostCallback 里赋值</li><li>performWorkUntilDeadline 里执行</li></ul></li><li>schedulePerformWorkUntilDeadline 产生宏任务，将执行权力移交浏览器<ul><li>关于赋值是优先 setImmediate，因为是经过一轮 event loop 立即执行，但是兼容性不好，可以使用 MessageChannel 来实现，如果没有 MessageChannel，再用 setTimeOut,但是浏览器的 setTimeout(() =&gt; {…},0)的 delay 起码是 4，也就是会被修改成 setTimeout(() =&gt; {…},4)，就浪费了 4ms</li><li>schedulePerformWorkUntilDeadline 的回调是 performWorkUntilDeadline</li></ul></li><li>isHostCallbackScheduled 锁定<code>下一轮事件循环立即执行的宏任务(schedulePerformWorkUntilDeadline)</code>在一次 event loop 循环只有一个任务执行。</li><li>isMessageLoopRunning 跟 isHostCallbackScheduled 的作用一样，双重保险</li><li>isHostTimeoutScheduled 是用来打断之前的等待任务，每次进来的任务是延迟任务，并且只有延迟任务，那么久打断上一个延迟任务的等待时间。</li><li>hasTimeRemaining：代表当前帧是否还有时间留给 react</li><li>这里的 callback 也就是外部传进来的执行函数也就是执行任务</li><li><code>下一次时间循环结束立即执行任务</code> 就是一个执行事件的时机</li></ol><h2 id="堆排序-Schedule-利用最小堆来获取最早的任务">堆排序(Schedule 利用最小堆来获取最早的任务)</h2><ol><li>调度就是用堆排序来获得最早过期任务的，最小堆，最小的时间戳在 index=0 位置</li><li>之所以用堆排序，是因为时间复杂度更低，最小堆构建的时间复杂度是 O(n)精确时间复杂度是 n-log(n+1),比 n 还小。每次加入一个任务之后就构建最小堆，事件复杂度是 O(n)，比冒泡排序 O(n^2)快很多。</li><li><a href="https://github.com/March-Wind/tool/tree/master/src/algorithm/heap-sort">讲解链接</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
